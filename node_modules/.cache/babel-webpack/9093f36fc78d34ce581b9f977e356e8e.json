{"ast":null,"code":"/**\r\n * Functionality for drawing simple buttons.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { Label } from \"./Label\";\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Button class is capable of drawing a simple rectangular button with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link IButtonEvents} for a list of available events\r\n * @see {@link IButtonAdapters} for a list of available Adapters\r\n */\nvar Button = /** @class */function (_super) {\n  __extends(Button, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Button() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"Button\";\n    _this.tooltipY = 0;\n    // Set defaults\n    _this.iconPosition = \"left\";\n    _this.layout = \"horizontal\";\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n    _this.padding(8, 16, 8, 16);\n    _this.setStateOnChildren = true;\n    var interfaceColors = new InterfaceColorSet();\n    // Create background\n    var background = _this.background;\n    background.fill = interfaceColors.getFor(\"secondaryButton\");\n    background.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\n    background.fillOpacity = 1;\n    background.strokeOpacity = 1;\n    background.cornerRadius(3, 3, 3, 3);\n    // Create the label element\n    _this.label = new Label();\n    _this.label.fill = interfaceColors.getFor(\"secondaryButtonText\");\n    ;\n    _this.label.shouldClone = false;\n    // Create default states\n    var hoverState = background.states.create(\"hover\");\n    hoverState.properties.fillOpacity = 1;\n    hoverState.properties.fill = interfaceColors.getFor(\"secondaryButtonHover\");\n    var downState = background.states.create(\"down\");\n    downState.transitionDuration = 100;\n    downState.properties.fill = interfaceColors.getFor(\"secondaryButtonDown\");\n    downState.properties.fillOpacity = 1;\n    // Set up accessibility\n    // A button should be always focusable\n    _this.role = \"button\";\n    _this.focusable = true;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(Button.prototype, \"icon\", {\n    /**\r\n     * @return Icon Sprite\r\n     */\n    get: function () {\n      return this._icon;\n    },\n    /**\r\n     * A [[Sprite]] to be used as an icon on button.\r\n     *\r\n     * @param icon Icon Sprite\r\n     */\n    set: function (icon) {\n      var currentIcon = this._icon;\n      if (currentIcon) {\n        //this._icon.dispose();\n        //this.removeDispose(currentIcon);\n        currentIcon.parent = undefined;\n      }\n      if (icon) {\n        this._icon = icon;\n        icon.parent = this;\n        icon.interactionsEnabled = false;\n        icon.shouldClone = false;\n        this.iconPosition = this.iconPosition;\n        this._disposers.push(icon);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"iconPosition\", {\n    /**\r\n     * @return Icon position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"iconPosition\");\n    },\n    /**\r\n     * Icon position: \"left\" or \"right\".\r\n     *\r\n     * @default \"left\"\r\n     * @param position  Icon position\r\n     */\n    set: function (position) {\n      this.setPropertyValue(\"iconPosition\", position);\n      if (this.icon) {\n        if (position == \"left\") {\n          this.icon.toBack();\n        } else {\n          this.icon.toFront();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"label\", {\n    /**\r\n     * @return Label element\r\n     */\n    get: function () {\n      return this._label;\n    },\n    /**\r\n     * [[Label]] element to be used for text.\r\n     *\r\n     * @param label element\r\n     */\n    set: function (label) {\n      if (this._label) {\n        //this._label.dispose();\n        this.removeDispose(this._label);\n      }\n      this._label = label;\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n        this._disposers.push(this._label);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a background element for the button.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background element\r\n   */\n  Button.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n  Button.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (source.label) {\n      this.label.copyFrom(source.label);\n    }\n    if (source.icon) {\n      this.icon = source.icon.clone();\n    }\n  };\n  return Button;\n}(Container);\nexport { Button };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Button\"] = Button;\n//# sourceMappingURL=Button.js.map","map":null,"metadata":{},"sourceType":"module"}