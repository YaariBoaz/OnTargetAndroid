{"ast":null,"code":"/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { Slice } from \"./Slice\";\nimport { Label } from \"./Label\";\nimport { registry } from \"../Registry\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\nvar Preloader = /** @class */function (_super) {\n  __extends(Preloader, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Preloader() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"Preloader\";\n    // Set dimensions\n    _this.width = percent(100);\n    _this.height = percent(100);\n    var interfaceColors = new InterfaceColorSet();\n    // Create main container\n    var sliceContainer = _this.createChild(Container);\n    sliceContainer.shouldClone = false;\n    // Add background (100%) slice\n    var backgroundSlice = sliceContainer.createChild(Slice);\n    backgroundSlice.shouldClone = false;\n    backgroundSlice.radius = 53;\n    backgroundSlice.arc = 360;\n    backgroundSlice.fill = interfaceColors.getFor(\"fill\");\n    backgroundSlice.fillOpacity = 0.8;\n    backgroundSlice.innerRadius = 42;\n    backgroundSlice.isMeasured = false;\n    _this.backgroundSlice = backgroundSlice;\n    // Add progress slice\n    var progressSlice = sliceContainer.createChild(Slice);\n    progressSlice.shouldClone = false;\n    progressSlice.radius = 50;\n    progressSlice.innerRadius = 45;\n    progressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\n    progressSlice.fillOpacity = 0.2;\n    progressSlice.isMeasured = false;\n    _this.progressSlice = progressSlice;\n    // Add text label element\n    var label = sliceContainer.createChild(Label);\n    label.shouldClone = false;\n    label.horizontalCenter = \"middle\";\n    label.verticalCenter = \"middle\";\n    label.isMeasured = false;\n    label.fill = interfaceColors.getFor(\"text\");\n    label.align = \"center\";\n    label.valign = \"middle\";\n    label.textAlign = \"middle\";\n    label.fillOpacity = 0.4;\n    _this.label = label;\n    // Set defaults\n    _this.background.opacity = 1;\n    _this.background.fill = interfaceColors.getFor(\"background\");\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n    _this.delay = 300;\n    // Create hidden state\n    var hiddenState = _this.states.create(\"hidden\");\n    hiddenState.properties.opacity = 0;\n    // Hide by default\n    _this.visible = false;\n    _this.hide(0);\n    _this.__disabled = true;\n    // Make it disposable\n    // @todo Maybe it's enough to just dispose `sliceContainer`?\n    _this._disposers.push(_this.backgroundSlice);\n    _this._disposers.push(_this.progressSlice);\n    _this._disposers.push(_this.label);\n    _this._disposers.push(sliceContainer);\n    return _this;\n  }\n  Object.defineProperty(Preloader.prototype, \"progress\", {\n    /**\r\n     * @return Progress (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"progress\");\n    },\n    /**\r\n     * Current preload progress. (0-1)\r\n     *\r\n     * * 0 - 0%\r\n     * * 0.5 - 50%\r\n     * * 1 - 100%\r\n     *\r\n     * Setting this to a value less than 1, will automatically reveal the\r\n     * preloader, while setting it to 1 (100%) will hide it.\r\n     *\r\n     * @param value Progress (0-1)\r\n     */\n    set: function (value) {\n      var _this = this;\n      this.__disabled = false;\n      this.validateLayout(); // show not in center without this\n      this.setPropertyValue(\"progress\", value);\n      /*if (!this.visible && value == 1) {\r\n          return;\r\n      }*/\n      this.progressSlice.arc = 360 * value;\n      if (this.label) {\n        this.label.text = Math.round(value * 100) + \"%\";\n      }\n      if (value >= 1) {\n        // Cancel the timeout\n        if (this._started) {\n          this._started = undefined;\n        }\n        // TODO remove closure ?\n        registry.events.once(\"enterframe\", function () {\n          var animation = _this.hide();\n          if (animation && !animation.isFinished()) {\n            animation.events.once(\"animationended\", function () {\n              _this.__disabled = true;\n            });\n          } else {\n            _this.__disabled = true;\n          }\n        });\n        this.interactionsEnabled = false;\n        this.setPropertyValue(\"progress\", 0);\n      } else if (value > 0) {\n        if (this.delay) {\n          if (!this._started) {\n            this._started = new Date().getTime();\n          } else if (this._started + this.delay <= new Date().getTime()) {\n            this.__disabled = false;\n            this.show();\n            this.interactionsEnabled = true;\n          }\n        } else {\n          this.__disabled = false;\n          this.show();\n          this.interactionsEnabled = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Preloader.prototype, \"delay\", {\n    /**\r\n     * @return Delay (ms)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"delay\");\n    },\n    /**\r\n     * Delay display of preloader by X milliseconds.\r\n     *\r\n     * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n     * set to 1) before `delay` ms, the loader is never shown.\r\n     *\r\n     * This is used to avoid brief flashing of the preload for very quick loads.\r\n     *\r\n     * @default 1000\r\n     * @param value  Delay (ms)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"delay\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Preloader;\n}(Container);\nexport { Preloader };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Preloader\"] = Preloader;\n//# sourceMappingURL=Preloader.js.map","map":null,"metadata":{},"sourceType":"module"}