{"ast":null,"code":"/**\r\n * Module for \"Focus\" filter.\r\n */\nimport { __extends } from \"tslib\";\nimport { Filter } from \"./Filter\";\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a \"Focus\" filter.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n */\nvar FocusFilter = /** @class */function (_super) {\n  __extends(FocusFilter, _super);\n  /**\r\n   * Constructor\r\n   */\n  function FocusFilter() {\n    var _this = _super.call(this) || this;\n    _this.className = \"FocusFilter\";\n    // Create elements\n    // NOTE: we do not need to add each individual element to `_disposers`\n    // because `filterPrimitives` has an event handler which automatically adds\n    // anything added to it to `_disposers`\n    _this.feFlood = _this.paper.add(\"feFlood\");\n    _this.feFlood.attr({\n      \"flood-color\": new InterfaceColorSet().getFor(\"primaryButtonHover\"),\n      \"result\": \"base\"\n    });\n    _this.filterPrimitives.push(_this.feFlood);\n    _this.feMorphology = _this.paper.add(\"feMorphology\");\n    _this.feMorphology.attr({\n      \"result\": \"bigger\",\n      \"in\": \"SourceGraphic\",\n      \"operator\": \"dilate\",\n      \"radius\": \"2\"\n    });\n    _this.filterPrimitives.push(_this.feMorphology);\n    _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\n    _this.feColorMatrix.attr({\n      \"result\": \"mask\",\n      \"in\": \"bigger\",\n      \"type\": \"matrix\",\n      \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\"\n    });\n    _this.filterPrimitives.push(_this.feColorMatrix);\n    _this.feComposite = _this.paper.add(\"feComposite\");\n    _this.feComposite.attr({\n      \"result\": \"drop\",\n      \"in\": \"base\",\n      \"in2\": \"mask\",\n      \"operator\": \"in\"\n    });\n    _this.filterPrimitives.push(_this.feComposite);\n    _this.feBlend = _this.paper.add(\"feBlend\");\n    _this.feBlend.attr({\n      \"in\": \"SourceGraphic\",\n      \"in2\": \"drop\",\n      \"mode\": \"normal\"\n    });\n    _this.filterPrimitives.push(_this.feBlend);\n    // Set default properties\n    _this.width = 130;\n    _this.height = 130;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(FocusFilter.prototype, \"stroke\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      return this.properties[\"stroke\"];\n    },\n    /**\r\n     * Stroke (outline) color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.properties[\"stroke\"] = value;\n      this.feFlood.attr({\n        \"flood-color\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FocusFilter.prototype, \"strokeWidth\", {\n    /**\r\n     * @return Outline thickness (px)\r\n     */\n    get: function () {\n      return this.properties[\"strokeWidth\"];\n    },\n    /**\r\n     * Stroke (outline) thickness in pixels.\r\n     *\r\n     * @param value  Outline thickness (px)\r\n     */\n    set: function (value) {\n      this.properties[\"strokeWidth\"] = value;\n      this.feMorphology.attr({\n        \"radius\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FocusFilter.prototype, \"opacity\", {\n    /**\r\n     * @return Outline opacity (0-1)\r\n     */\n    get: function () {\n      return this.properties[\"opacity\"];\n    },\n    /**\r\n     * Opacity of the outline. (0-1)\r\n     *\r\n     * @param value  Outline opacity (0-1)\r\n     */\n    set: function (value) {\n      this.properties[\"opacity\"] = value;\n      this.feColorMatrix.attr({\n        \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \" + value + \" 0\"\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets filter's target element.\r\n   *\r\n   * In addition it also disables built-in focus outline on element this\r\n   * filter is applied to.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Element filter is being attached to\r\n   */\n  FocusFilter.prototype.setSprite = function (value) {\n    if (this._sprite && this._sprite != value) {\n      this._sprite.group.removeStyle(\"outline\");\n    }\n    value.group.addStyle({\n      \"outline\": \"none\"\n    });\n    _super.prototype.setSprite.call(this, value);\n  };\n  return FocusFilter;\n}(Filter);\nexport { FocusFilter };\n//# sourceMappingURL=FocusFilter.js.map","map":null,"metadata":{},"sourceType":"module"}