{"ast":null,"code":"import _asyncToGenerator from \"/Applications/OnTarget/OnTarget/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\nimport { c as componentOnReady, n as debounce } from './helpers-dd7e4b7b.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() {\n    return {\n      \"url\": [\"onUpdate\"],\n      \"component\": [\"onUpdate\"],\n      \"componentProps\": [\"onComponentProps\"]\n    };\n  }\n};\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() {\n    return {\n      \"from\": [\"propDidChange\"],\n      \"to\": [\"propDidChange\"]\n    };\n  }\n};\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = segments => {\n  const path = segments.filter(s => s.length > 0).join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  } else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = chain => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      } else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = path => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/').map(s => s.trim()).filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return {\n    segments,\n    queryString\n  };\n};\nconst printRoutes = routes => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = redirects => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\nconst writeNavState = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (root, chain, direction, index, changed = false, animation) {\n    try {\n      // find next navigation outlet in the DOM\n      const outlet = searchNavNode(root);\n      // make sure we can continue interacting the DOM, otherwise abort\n      if (index >= chain.length || !outlet) {\n        return changed;\n      }\n      yield new Promise(resolve => componentOnReady(outlet, resolve));\n      const route = chain[index];\n      const result = yield outlet.setRouteId(route.id, route.params, direction, animation);\n      // if the outlet changed the page, reset navigation to neutral (no direction)\n      // this means nested outlets will not animate\n      if (result.changed) {\n        direction = ROUTER_INTENT_NONE;\n        changed = true;\n      }\n      // recursively set nested outlets\n      changed = yield writeNavState(result.element, chain, direction, index + 1, changed, animation);\n      // once all nested outlets are visible let's make the parent visible too,\n      // using markVisible prevents flickering\n      if (result.markVisible) {\n        yield result.markVisible();\n      }\n      return changed;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  });\n  return function writeNavState(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst readNavState = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (root) {\n    const ids = [];\n    let outlet;\n    let node = root;\n    // tslint:disable-next-line:no-constant-condition\n    while (true) {\n      outlet = searchNavNode(node);\n      if (outlet) {\n        const id = yield outlet.getRouteId();\n        if (id) {\n          node = id.element;\n          id.element = undefined;\n          ids.push(id);\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    return {\n      ids,\n      outlet\n    };\n  });\n  return function readNavState(_x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, {\n      once: true\n    });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = root => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const {\n    from,\n    to\n  } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      /**\n       * Only compare routes with the chain that have the same number of parameters.\n       */\n      if (routeIdParams.length === routeChain.path.length) {\n        /**\n         * Maps the route's params into a path based on the path variable names,\n         * to compare against the route chain format.\n         *\n         * Before:\n         * ```ts\n         * {\n         *  params: {\n         *    s1: 'a',\n         *    s2: 'b'\n         *  }\n         * }\n         * ```\n         *\n         * After:\n         * ```ts\n         * [':s1',':s2']\n         * ```\n         */\n        const pathWithParams = routeIdParams.map(key => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.path[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    } else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        } else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = matchesDefault ? matchesDefault === (segments.next() === '') : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = chain => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      } else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = root => {\n  return Array.from(root.children).filter(el => el.tagName === 'ION-ROUTE-REDIRECT').map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to)\n    };\n  });\n};\nconst readRoutes = root => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = node => {\n  return Array.from(node.children).filter(el => el.tagName === 'ION-ROUTE' && el.component).map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = nodes => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  componentWillLoad() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield waitUntilNavNode();\n      const canProceed = yield _this.runGuards(_this.getPath());\n      if (canProceed !== true) {\n        if (typeof canProceed === 'object') {\n          const {\n            redirect\n          } = canProceed;\n          const path = parsePath(redirect);\n          _this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n          yield _this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n        }\n      } else {\n        yield _this.onRoutesChanged();\n      }\n    })();\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  onPopState() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const direction = _this2.historyDirection();\n      let segments = _this2.getPath();\n      const canProceed = yield _this2.runGuards(segments);\n      if (canProceed !== true) {\n        if (typeof canProceed === 'object') {\n          segments = parsePath(canProceed.redirect).segments;\n        } else {\n          return false;\n        }\n      }\n      return _this2.writeNavStateRoot(segments, direction);\n    })();\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  canTransition() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const canProceed = yield _this3.runGuards();\n      if (canProceed !== true) {\n        if (typeof canProceed === 'object') {\n          return canProceed.redirect;\n        } else {\n          return false;\n        }\n      }\n      return true;\n    })();\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  push(url, direction = 'forward', animation) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (url.startsWith('.')) {\n        url = new URL(url, window.location.href).pathname;\n      }\n      let parsedPath = parsePath(url);\n      const canProceed = yield _this4.runGuards(parsedPath.segments);\n      if (canProceed !== true) {\n        if (typeof canProceed === 'object') {\n          parsedPath = parsePath(canProceed.redirect);\n        } else {\n          return false;\n        }\n      }\n      _this4.setPath(parsedPath.segments, direction, parsedPath.queryString);\n      return _this4.writeNavStateRoot(parsedPath.segments, direction, animation);\n    })();\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  printDebug() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      printRoutes(readRoutes(_this5.el));\n      printRedirects(readRedirects(_this5.el));\n    })();\n  }\n  /** @internal */\n  navChanged(direction) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (_this6.busy) {\n        console.warn('[ion-router] router is busy, navChanged was cancelled');\n        return false;\n      }\n      const {\n        ids,\n        outlet\n      } = yield readNavState(window.document.body);\n      const routes = readRoutes(_this6.el);\n      const chain = routerIDsToChain(ids, routes);\n      if (!chain) {\n        console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n        return false;\n      }\n      const path = chainToPath(chain);\n      if (!path) {\n        console.warn('[ion-router] router could not match path because some required param is missing');\n        return false;\n      }\n      _this6.setPath(path, direction);\n      yield _this6.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n      return true;\n    })();\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || state >= lastState && lastState > 0) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  writeNavStateRoot(path, direction, animation) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (!path) {\n        console.error('[ion-router] URL is not part of the routing set');\n        return false;\n      }\n      // lookup redirect rule\n      const redirects = readRedirects(_this7.el);\n      const redirect = findRouteRedirect(path, redirects);\n      let redirectFrom = null;\n      if (redirect) {\n        const {\n          segments,\n          queryString\n        } = redirect.to;\n        _this7.setPath(segments, direction, queryString);\n        redirectFrom = redirect.from;\n        path = segments;\n      }\n      // lookup route chain\n      const routes = readRoutes(_this7.el);\n      const chain = routerPathToChain(path, routes);\n      if (!chain) {\n        console.error('[ion-router] the path does not match any route');\n        return false;\n      }\n      // write DOM give\n      return _this7.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n    })();\n  }\n  safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const unlock = yield _this8.lock();\n      let changed = false;\n      try {\n        changed = yield _this8.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n      } catch (e) {\n        console.error(e);\n      }\n      unlock();\n      return changed;\n    })();\n  }\n  lock() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const p = _this9.waitPromise;\n      let resolve;\n      _this9.waitPromise = new Promise(r => resolve = r);\n      if (p !== undefined) {\n        yield p;\n      }\n      return resolve;\n    })();\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  runGuards(to = this.getPath(), from) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      if (from === undefined) {\n        from = parsePath(_this10.previousPath).segments;\n      }\n      if (!to || !from) {\n        return true;\n      }\n      const routes = readRoutes(_this10.el);\n      const fromChain = routerPathToChain(from, routes);\n      const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n      const canLeave = beforeLeaveHook ? yield beforeLeaveHook() : true;\n      if (canLeave === false || typeof canLeave === 'object') {\n        return canLeave;\n      }\n      const toChain = routerPathToChain(to, routes);\n      const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n      return beforeEnterHook ? beforeEnterHook() : true;\n    })();\n  }\n  writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      if (_this11.busy) {\n        console.warn('[ion-router] router is busy, transition was cancelled');\n        return false;\n      }\n      _this11.busy = true;\n      // generate route event and emit will change\n      const routeEvent = _this11.routeChangeEvent(path, redirectFrom);\n      if (routeEvent) {\n        _this11.ionRouteWillChange.emit(routeEvent);\n      }\n      const changed = yield writeNavState(node, chain, direction, index, false, animation);\n      _this11.busy = false;\n      // emit did change\n      if (routeEvent) {\n        _this11.ionRouteDidChange.emit(routeEvent);\n      }\n      return changed;\n    })();\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to\n    };\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = ev => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return h(Host, {\n      onClick: this.onClick,\n      class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      })\n    }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null)));\n  }\n};\nRouterLink.style = routerLinkCss;\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };","map":{"version":3,"names":["r","registerInstance","e","createEvent","i","getElement","h","H","Host","c","componentOnReady","n","debounce","b","getIonMode","o","openURL","createColorClasses","Route","constructor","hostRef","ionRouteDataChanged","url","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","connectedCallback","watchers","RouteRedirect","ionRouteRedirectChanged","propDidChange","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","ROUTER_INTENT_BACK","generatePath","segments","path","filter","s","join","generateUrl","useHash","queryString","undefined","writePath","history","root","direction","state","parsePath","pushState","replaceState","chainToPath","chain","route","segment","param","params","slice","push","removePrefix","prefix","readPath","loc","pathname","hash","qsStart","indexOf","substr","split","map","trim","printRoutes","routes","console","group","forEach","ids","id","debug","groupEnd","printRedirects","redirects","redirect","to","from","writeNavState","index","changed","animation","outlet","searchNavNode","Promise","resolve","result","setRouteId","element","markVisible","error","readNavState","node","getRouteId","waitUntilNavNode","document","body","window","addEventListener","once","QUERY","matches","querySelector","matchesRedirect","expected","findRouteRedirect","find","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","pathWithParams","j","matchesPath","inputPath","RouterSegments","matchesDefault","allparams","data","next","mergeParams","beforeEnter","beforeLeave","a","assign","routerIDsToChain","chains","match","maxMatches","routerPathToChain","matchedChain","computePriority","level","pow","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","component","componentProps","nodes","flattenNode","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","lastState","componentWillLoad","canProceed","runGuards","getPath","setPath","writeNavStateRoot","onRoutesChanged","componentDidLoad","onRedirectChanged","bind","onPopState","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","canTransition","startsWith","URL","location","href","parsedPath","waitPromise","printDebug","navChanged","warn","safeWriteNavState","_a","win","title","redirectFrom","unlock","lock","p","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","redirectFromPath","redirectedFrom","routerLinkCss","RouterLink","routerDirection","onClick","routerAnimation","render","mode","attrs","rel","target","class","color","style","ion_route","ion_route_redirect","ion_router","ion_router_link"],"sources":["/Applications/OnTarget/OnTarget/node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\nimport { c as componentOnReady, n as debounce } from './helpers-dd7e4b7b.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      /**\n       * Only compare routes with the chain that have the same number of parameters.\n       */\n      if (routeIdParams.length === routeChain.path.length) {\n        /**\n         * Maps the route's params into a path based on the path variable names,\n         * to compare against the route chain format.\n         *\n         * Before:\n         * ```ts\n         * {\n         *  params: {\n         *    s1: 'a',\n         *    s2: 'b'\n         *  }\n         * }\n         * ```\n         *\n         * After:\n         * ```ts\n         * [':s1',':s2']\n         * ```\n         */\n        const pathWithParams = routeIdParams.map(key => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.path[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getPath());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getPath();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    let parsedPath = parsePath(url);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments, queryString } = redirect.to;\n      this.setPath(segments, direction, queryString);\n      redirectFrom = redirect.from;\n      path = segments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  async runGuards(to = this.getPath(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = routerPathToChain(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}