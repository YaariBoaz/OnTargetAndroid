{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ShootingService = /*#__PURE__*/(() => {\n  class ShootingService {\n    constructor(http) {\n      this.http = http;\n      this.drillHasStarted = false;\n      this.targetsArrived = new BehaviorSubject(null);\n      this.RNADOM_SHOTS = [0, 16, 32, 48];\n      this.drillStarteEvent = new BehaviorSubject(null);\n      this.isTargetConnected = false;\n    }\n    getMOABySight() {\n      const signName = this.selectedDrill.sight;\n      let moa = 0.6;\n      this.sightsZeroing.forEach(sight => {\n        if (sight.name === signName) {\n          moa = sight.moa;\n        }\n      });\n      return moa;\n    }\n    setBaseUrl(baseUrl) {\n      this.BaseUrl = baseUrl;\n    }\n    setTargetsI() {\n      if (this.getBaseUrl()) {\n        this.http.get('http://' + this.getBaseUrl() + ':8087/api/GetTargets').subscribe(data => {\n          this.targets = JSON.parse(data);\n          this.targetsArrived.next(this.targets);\n        }, error => {\n          this.targets = [149];\n        });\n      }\n    }\n    setIsZero(flag) {\n      this.isZero = flag;\n    }\n    getisZero() {\n      return this.isZero;\n    }\n    getBaseUrl() {\n      return this.BaseUrl;\n    }\n    getRecommendation(shots, centerCord) {\n      let p = 0;\n      const width = centerCord.X * 2;\n      const heigth = centerCord.Y * 2;\n      const intervalX = width / 3;\n      const intervalY = heigth / 3;\n      const squers = new Array();\n      const s1 = {};\n      s1.A = new Point(0, 0);\n      s1.B = new Point(intervalX, 0);\n      s1.C = new Point(0, intervalY);\n      s1.D = new Point(intervalX, intervalY);\n      s1.Name = '1';\n      s1.Recommendation = 'Too Little Trigger Finger';\n      squers.push(s1);\n      const s2 = {};\n      s2.A = s1.B;\n      s2.B = new Point(intervalX * 2, 0);\n      s2.C = s1.D;\n      s2.D = new Point(intervalX * 2, intervalY);\n      s2.Name = '2';\n      s2.Recommendation = 'Pushing (Anticipating Recoil) Or No Follow-Through';\n      squers.push(s2);\n      const s3 = {};\n      s3.A = s2.B;\n      s3.B = new Point(intervalX * 3, 0);\n      s3.C = s2.D;\n      s3.D = new Point(intervalX * 3, intervalY);\n      s3.Recommendation = 'Heeling (Anticipating Recoil)';\n      squers.push(s3);\n      s3.Name = '3';\n      const s4 = {};\n      s4.A = s1.C;\n      s4.B = s1.D;\n      s4.C = new Point(0, intervalY * 2);\n      s4.D = new Point(intervalX, intervalY * 2);\n      s4.Recommendation = 'Tightening Fingers';\n      s4.Name = '4';\n      squers.push(s4);\n      const s5 = {};\n      s5.A = s2.C;\n      s5.B = s2.D;\n      s5.C = new Point(intervalX, intervalY * 2);\n      s5.D = new Point(intervalX * 2, intervalY * 2);\n      s5.Recommendation = 'Good Shooting';\n      squers.push(s5);\n      s5.Name = '5';\n      const s6 = {};\n      s6.A = s3.C;\n      s6.B = s3.D;\n      s6.C = new Point(intervalX * 2, intervalY * 2);\n      s6.D = new Point(intervalX * 3, intervalY * 2);\n      s6.Recommendation = 'Thumbing( Squeezing Thumb) Or Too Much Trigger Finger';\n      squers.push(s6);\n      s6.Name = '6';\n      const s7 = {};\n      s7.A = s4.C;\n      s7.B = s4.D;\n      s7.C = new Point(0, intervalY * 3);\n      s7.D = new Point(intervalX, intervalY * 3);\n      s7.Recommendation = 'Jerking Or Slapping Trigger';\n      s7.Name = '7';\n      squers.push(s7);\n      const s8 = {};\n      s8.A = s5.C;\n      s8.B = s5.D;\n      s8.C = new Point(intervalX, intervalY * 3);\n      s8.D = new Point(intervalX * 2, intervalY * 3);\n      s8.Recommendation = 'Breaking Wrist Down, Pushing Forward Or Drooping Head';\n      s8.Name = '8';\n      squers.push(s8);\n      const s9 = {};\n      s9.A = s6.C;\n      s9.B = s6.D;\n      s9.C = new Point(intervalX * 2, intervalY * 3);\n      s9.D = new Point(intervalX * 3, intervalY * 3);\n      s9.Recommendation = 'Tightening Grip While Pulling Trigger';\n      s9.Name = '9';\n      squers.push(s9);\n      let count = -1;\n      let s;\n      // tslint:disable-next-line:prefer-for-of\n      for (let i = 0; i < squers.length; i++) {\n        const sq = squers[i];\n        const c = this.isInSquare(sq, shots);\n        if (c >= count) {\n          count = c;\n          s = sq;\n        }\n      }\n      p = count / shots.length;\n      const res = new Recomondation(p, s.Recommendation);\n      return res;\n    }\n    isInSquare(sq, list) {\n      let count = 0;\n      for (const item in list) {\n        if (this.inSquare(sq, list[item])) {\n          count++;\n        }\n      }\n      return count;\n    }\n    inSquare(sq, hit) {\n      if (hit.x > sq.A.X && hit.x <= sq.B.X && hit.y >= sq.A.Y && hit.y <= sq.C.Y) {\n        return true;\n      }\n      return false;\n    }\n    fakeShot() {\n      const x = this.RNADOM_SHOTS[Math.floor(Math.random() * this.RNADOM_SHOTS.length)];\n      const y = this.RNADOM_SHOTS[Math.floor(Math.random() * this.RNADOM_SHOTS.length)];\n      return {\n        xCoord: x,\n        yCoord: y\n      };\n    }\n  }\n  ShootingService.ɵfac = function ShootingService_Factory(t) {\n    return new (t || ShootingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ShootingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShootingService,\n    factory: ShootingService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShootingService;\n})();\nclass Point {\n  constructor(x, y) {\n    this.X = x;\n    this.Y = y;\n  }\n}\nexport class Recomondation {\n  constructor(x, y) {\n    this.Probabilty = x;\n    this.Recommendation = y;\n  }\n}\nexport class Square {\n  constructor(a, b, c, d) {\n    this.A = a;\n    this.B = b;\n    this.C = c;\n    this.D = d;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}