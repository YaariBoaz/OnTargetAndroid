{"ast":null,"code":"/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { Label } from \"./Label\";\nimport { Button } from \"../elements/Button\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\nvar SwitchButton = /** @class */function (_super) {\n  __extends(SwitchButton, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SwitchButton() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"SwitchButton\";\n    _this.tooltipY = 0;\n    // Set defaults\n    _this.layout = \"horizontal\";\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n    _this.padding(8, 16, 8, 16);\n    _this.setStateOnChildren = true;\n    _this.states.create(\"active\");\n    var interfaceColors = new InterfaceColorSet();\n    // Create the label element\n    var leftLabel = new Label();\n    leftLabel.fillOpacity = 0.3;\n    var llas = leftLabel.states.create(\"active\");\n    llas.properties.fillOpacity = 1;\n    leftLabel.isActive = true;\n    _this.leftLabel = leftLabel;\n    var button = new Button();\n    var circle = new Circle();\n    button.contentValign = \"none\";\n    button.padding(0, 0, 0, 0);\n    circle.radius = 10;\n    button.icon = circle;\n    button.icon.valign = \"middle\";\n    button.label = undefined;\n    var p100 = percent(100);\n    button.background.cornerRadius(p100, p100, p100, p100);\n    button.width = circle.radius * 3.5;\n    button.height = circle.radius * 2.1;\n    button.marginLeft = 8;\n    button.marginRight = 8;\n    button.togglable = true;\n    circle.dx = -circle.radius * 0.7;\n    circle.fill = interfaceColors.getFor(\"primaryButton\");\n    var hs = circle.states.create(\"hover\");\n    hs.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\n    var as = circle.states.create(\"active\");\n    as.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\n    as.properties.dx = circle.radius * 0.7;\n    _this.switchButton = button;\n    _this.events.on(\"toggled\", function () {\n      _this.leftLabel.isActive = !_this.isActive;\n      _this.rightLabel.isActive = _this.isActive;\n    });\n    // Create the label element\n    var rightLabel = new Label();\n    rightLabel.fillOpacity = 0.3;\n    var rlas = rightLabel.states.create(\"active\");\n    rlas.properties.fillOpacity = 1;\n    _this.rightLabel = rightLabel;\n    // Set up accessibility\n    // A Button should be always focusable\n    _this.role = \"button\";\n    _this.focusable = true;\n    rightLabel.valign = \"middle\";\n    leftLabel.valign = \"middle\";\n    button.valign = \"middle\";\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(SwitchButton.prototype, \"leftLabel\", {\n    /**\r\n     * @return Left label element\r\n     */\n    get: function () {\n      return this._leftLabel;\n    },\n    /**\r\n     * [[Label]] element to be used for left text.\r\n     *\r\n     * @param left label element\r\n     */\n    set: function (label) {\n      if (this._leftLabel) {\n        this.removeDispose(this._leftLabel);\n      }\n      this._leftLabel = label;\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n        label.shouldClone = false;\n        this._disposers.push(this._leftLabel);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SwitchButton.prototype, \"rightLabel\", {\n    /**\r\n     * @return Rigth label element\r\n     */\n    get: function () {\n      return this._rightLabel;\n    },\n    /**\r\n     * [[Label]] element to be used for left text.\r\n     *\r\n     * @param rigth label element\r\n     */\n    set: function (label) {\n      if (this._rightLabel) {\n        this.removeDispose(this._rightLabel);\n      }\n      this._rightLabel = label;\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n        label.shouldClone = false;\n        this._disposers.push(this._rightLabel);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SwitchButton.prototype, \"switch\", {\n    /**\r\n     * @ignore\r\n     * @deprecated Use `switchButton` instead\r\n     */\n    get: function () {\n      return this._switchButton;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SwitchButton.prototype, \"switchButton\", {\n    /**\r\n     * @return Button\r\n     */\n    get: function () {\n      return this._switchButton;\n    },\n    /**\r\n     * A [[Button]] element for switch.\r\n     *\r\n     * @param Button\r\n     */\n    set: function (button) {\n      if (this._switchButton) {\n        this.removeDispose(this._switchButton);\n      }\n      this._switchButton = button;\n      if (button) {\n        button.parent = this;\n        button.shouldClone = false;\n        this._disposers.push(this._switchButton);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n  SwitchButton.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (source.leftLabel) {\n      this.leftLabel.copyFrom(source.leftLabel);\n    }\n    if (source.rightLabel) {\n      this.rightLabel.copyFrom(source.rightLabel);\n    }\n    if (source.switchButton) {\n      this.switchButton.copyFrom(source.switchButton);\n    }\n  };\n  return SwitchButton;\n}(Container);\nexport { SwitchButton };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;\n//# sourceMappingURL=SwitchButton.js.map","map":null,"metadata":{},"sourceType":"module"}