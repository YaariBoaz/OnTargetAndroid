{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar Disposer = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param dispose  Function that disposes object\r\n   */\n  function Disposer(dispose) {\n    this._disposed = false;\n    this._dispose = dispose;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  Disposer.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes the object.\r\n   */\n  Disposer.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  };\n  return Disposer;\n}();\nexport { Disposer };\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar MultiDisposer = /** @class */function (_super) {\n  __extends(MultiDisposer, _super);\n  function MultiDisposer(disposers) {\n    return _super.call(this, function () {\n      $array.each(disposers, function (x) {\n        x.dispose();\n      });\n    }) || this;\n  }\n  return MultiDisposer;\n}(Disposer);\nexport { MultiDisposer };\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar MutableValueDisposer = /** @class */function (_super) {\n  __extends(MutableValueDisposer, _super);\n  /**\r\n   * Constructor.\r\n   */\n  function MutableValueDisposer() {\n    var _this = _super.call(this, function () {\n      if ($type.hasValue(_this._disposer)) {\n        _this._disposer.dispose();\n        _this._disposer = undefined;\n      }\n    }) || this;\n    return _this;\n  }\n  /**\r\n   * Returns current value.\r\n   *\r\n   * @return Value\r\n   */\n  MutableValueDisposer.prototype.get = function () {\n    return this._value;\n  };\n  /**\r\n   * Sets value and disposes previous disposer if it was set.\r\n   *\r\n   * @param value     New value\r\n   * @param disposer  Disposer\r\n   */\n  MutableValueDisposer.prototype.set = function (value, disposer) {\n    if ($type.hasValue(this._disposer)) {\n      this._disposer.dispose();\n    }\n    this._disposer = disposer;\n    this._value = value;\n  };\n  /**\r\n   * Resets the disposer value.\r\n   */\n  MutableValueDisposer.prototype.reset = function () {\n    this.set(undefined, undefined);\n  };\n  return MutableValueDisposer;\n}(Disposer);\nexport { MutableValueDisposer };\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar CounterDisposer = /** @class */function (_super) {\n  __extends(CounterDisposer, _super);\n  function CounterDisposer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * [_counter description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._counter = 0;\n    return _this;\n  }\n  /**\r\n   * [increment description]\r\n   *\r\n   * @todo Description\r\n   */\n  CounterDisposer.prototype.increment = function () {\n    var _this = this;\n    // TODO throw an error if it is disposed\n    ++this._counter;\n    // TODO make this more efficient\n    return new Disposer(function () {\n      --_this._counter;\n      if (_this._counter === 0) {\n        _this.dispose();\n      }\n    });\n  };\n  return CounterDisposer;\n}(Disposer);\nexport { CounterDisposer };\n//# sourceMappingURL=Disposer.js.map","map":null,"metadata":{},"sourceType":"module"}