{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { Injectable, Component, NgModule, Input, EventEmitter, defineInjectable } from '@angular/core';\nimport { Observable, interval } from 'rxjs';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nimport * as ɵngcc0 from '@angular/core';\nclass CountupTimerService {\n  constructor() {\n    //Init\n    this.timerValue = {\n      seconds: '00',\n      mins: '00',\n      hours: '00'\n    };\n    this.isTimerStart = false;\n    this.totalSeconds = 0;\n    this.currentOperationId = 0;\n    //start timer\n    this.startTimer =\n    /**\r\n    * @param {?=} startTime\r\n    * @return {?}\r\n    */\n    startTime => {\n      if (startTime) {\n        /** @type {?} */\n        let currentDate = new Date();\n        /** @type {?} */\n        let startedTime = new Date(startTime);\n        this.totalSeconds = Math.round((currentDate.getTime() - startedTime.getTime()) / 1000);\n      }\n      this.isTimerStart = true;\n      return true;\n    };\n    //end timer\n    this.pauseTimer =\n    /**\r\n    * @param {?=} startTime\r\n    * @param {?=} endTime\r\n    * @return {?}\r\n    */\n    (startTime, endTime) => {\n      if (startTime && endTime) {\n        /** @type {?} */\n        let endedDate = new Date(endTime);\n        /** @type {?} */\n        let startedTime = new Date(startTime);\n        this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);\n      }\n      this.isTimerStart = false;\n      return false;\n    };\n    //reset Timer\n    this.stopTimer =\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      this.isTimerStart = false;\n      this.totalSeconds = 0;\n    };\n    //get timer value Obj\n    this.getTimerValue =\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      return new Observable(\n      /**\r\n      * @param {?} obs\r\n      * @return {?}\r\n      */\n      obs => {\n        if (this.intervalSubscription) {\n          this.intervalSubscription.unsubscribe();\n        }\n        this.intervalSubscription = this.interval.subscribe(\n        /**\r\n        * @param {?} int\r\n        * @return {?}\r\n        */\n        int => {\n          if (this.isTimerStart) {\n            ++this.totalSeconds;\n            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\n            /** @type {?} */\n            let totalSecondsForMinutes = 0;\n            totalSecondsForMinutes = Math.trunc(this.totalSeconds / 60) >= 60 ? this.totalSeconds / 60 % 60 : this.totalSeconds / 60;\n            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\n            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\n            obs.next(this.timerValue);\n            obs.complete();\n          } else {\n            if (this.totalSeconds > 0) {\n              this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\n              /** @type {?} */\n              let totalSecondsForMinutes = 0;\n              totalSecondsForMinutes = Math.trunc(this.totalSeconds / 60) >= 60 ? this.totalSeconds / 60 % 60 : this.totalSeconds / 60;\n              this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\n              this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\n            } else {\n              this.timerValue.hours = \"00\";\n              this.timerValue.mins = \"00\";\n              this.timerValue.seconds = \"00\";\n            }\n            obs.next(this.timerValue);\n            obs.complete();\n          }\n        },\n        /**\r\n        * @param {?} error\r\n        * @return {?}\r\n        */\n        error => {\n          obs.error(error);\n          obs.complete();\n        });\n      });\n    };\n    //set timer value\n    this.setTimervalue =\n    /**\r\n    * @param {?} val\r\n    * @return {?}\r\n    */\n    val => {\n      /** @type {?} */\n      let valString = val + \"\";\n      return valString.length < 2 ? \"0\" + valString : valString;\n    };\n    this.interval = interval(1000);\n  }\n}\nCountupTimerService.ɵfac = function CountupTimerService_Factory(t) {\n  return new (t || CountupTimerService)();\n};\nCountupTimerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: CountupTimerService,\n  factory: CountupTimerService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */CountupTimerService.ngInjectableDef = defineInjectable({\n  factory: function CountupTimerService_Factory() {\n    return new CountupTimerService();\n  },\n  token: CountupTimerService,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass countUpTimerConfigModel {}\nclass timerTexts {}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nlet CountupTimerComponent = /*#__PURE__*/(() => {\n  class CountupTimerComponent {\n    /**\r\n     * @param {?} countupTimerService\r\n     */\n    constructor(countupTimerService) {\n      this.countupTimerService = countupTimerService;\n      //Init\n      this.timerObj = {};\n      //get timer value\n      this.getTimerValue =\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        this.timerSubscription = this.countupTimerService.getTimerValue().subscribe(\n        /**\r\n        * @param {?} res\r\n        * @return {?}\r\n        */\n        res => {\n          this.timerObj = Object.assign(res);\n        },\n        /**\r\n        * @param {?} error\r\n        * @return {?}\r\n        */\n        error => {\n          console.log(error);\n          console.log('Failed to get timer value');\n        });\n      };\n    }\n    /**\r\n     * @return {?}\r\n     */\n    ngOnInit() {\n      this.getTimerValue();\n      this.timerConfig = new countUpTimerConfigModel();\n      this.timerTextConfig = new timerTexts();\n      this.timerConfig = this.countUpTimerConfig ? Object.assign(this.countUpTimerConfig) : null;\n      this.timerTextConfig = this.countUpTimerConfig && this.countUpTimerConfig.timerTexts ? Object.assign(this.countUpTimerConfig.timerTexts) : null;\n    }\n    /**\r\n     * @return {?}\r\n     */\n    ngOnDestroy() {\n      this.timerSubscription.unsubscribe();\n    }\n  }\n  CountupTimerComponent.ɵfac = function CountupTimerComponent_Factory(t) {\n    return new (t || CountupTimerComponent)(ɵngcc0.ɵɵdirectiveInject(CountupTimerService));\n  };\n  CountupTimerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CountupTimerComponent,\n    selectors: [[\"countup-timer\"]],\n    inputs: {\n      startTime: \"startTime\",\n      countUpTimerConfig: \"countUpTimerConfig\"\n    },\n    decls: 13,\n    vars: 8,\n    consts: [[1, \"time-category\"]],\n    template: function CountupTimerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵelementStart(1, \"span\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"span\", 0);\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"span\");\n        ɵngcc0.ɵɵtext(6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 0);\n        ɵngcc0.ɵɵtext(8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\");\n        ɵngcc0.ɵɵtext(10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 0);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap((ctx.timerConfig == null ? null : ctx.timerConfig.timerClass) ? ctx.timerConfig.timerClass : \"\");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.timerObj.hours);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\"\", ctx.timerTextConfig && ctx.timerTextConfig.hourText ? ctx.timerTextConfig.hourText : \"hh\", \" \");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.timerObj.mins);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\"\", ctx.timerTextConfig && ctx.timerTextConfig.minuteText ? ctx.timerTextConfig.minuteText : \"mm\", \" \");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.timerObj.seconds);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.timerTextConfig && ctx.timerTextConfig.secondsText ? ctx.timerTextConfig.secondsText : \"ss\");\n      }\n    },\n    styles: [\"\"]\n  });\n  /** @nocollapse */\n  return CountupTimerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass countDownTimerConfigModel {}\nclass countDownTimerTexts {}\n/** @enum {string} */\nconst TimerStaus = {\n  START: \"START\",\n  PAUSE: \"PAUSE\",\n  STOP: \"STOP\"\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass CountdownTimerService {\n  constructor() {\n    this.onTimerStatusChange = new EventEmitter();\n    //Init\n    this.timerValue = {\n      seconds: '00',\n      mins: '00',\n      hours: '00'\n    };\n    this.isTimerStart = false;\n    this.totalSeconds = 0;\n    this.currentOperationId = 0;\n    //start timer\n    this.startTimer =\n    /**\r\n    * @param {?} startTime\r\n    * @return {?}\r\n    */\n    startTime => {\n      if (startTime) {\n        /** @type {?} */\n        let currentDate = new Date();\n        /** @type {?} */\n        let startedTime = new Date(startTime);\n        this.totalSeconds = Math.round((currentDate.getTime() - startedTime.getTime()) / 1000) * -1;\n      }\n      this.isTimerStart = true;\n      this.onTimerStatusChange.emit(TimerStaus.START);\n      return true;\n    };\n    //end timer\n    this.pauseTimer =\n    /**\r\n    * @param {?=} startTime\r\n    * @param {?=} endTime\r\n    * @return {?}\r\n    */\n    (startTime, endTime) => {\n      if (startTime && endTime) {\n        /** @type {?} */\n        let endedDate = new Date(endTime);\n        /** @type {?} */\n        let startedTime = new Date(startTime);\n        this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);\n      }\n      this.isTimerStart = false;\n      this.onTimerStatusChange.emit(TimerStaus.PAUSE);\n      return false;\n    };\n    //reset Timer\n    this.stopTimer =\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      this.isTimerStart = false;\n      this.totalSeconds = 0;\n      this.onTimerStatusChange.emit(TimerStaus.STOP);\n    };\n    //resume Timer\n    this.resumeTimer =\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      this.isTimerStart = true;\n    };\n    //get timer value Obj\n    this.getTimerValue =\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      return new Observable(\n      /**\r\n      * @param {?} obs\r\n      * @return {?}\r\n      */\n      obs => {\n        if (this.intervalSubscription) {\n          this.intervalSubscription.unsubscribe();\n        }\n        this.intervalSubscription = this.interval.subscribe(\n        /**\r\n        * @param {?} int\r\n        * @return {?}\r\n        */\n        int => {\n          if (this.isTimerStart && this.totalSeconds > 0) {\n            --this.totalSeconds;\n            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\n            /** @type {?} */\n            let totalSecondsForMinutes = 0;\n            totalSecondsForMinutes = Math.trunc(this.totalSeconds / 60) >= 60 ? this.totalSeconds / 60 % 60 : this.totalSeconds / 60;\n            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\n            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\n            obs.next(this.timerValue);\n            obs.complete();\n          } else {\n            if (this.totalSeconds > 0) {\n              this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\n              /** @type {?} */\n              let totalSecondsForMinutes = 0;\n              totalSecondsForMinutes = Math.trunc(this.totalSeconds / 60) >= 60 ? this.totalSeconds / 60 % 60 : this.totalSeconds / 60;\n              this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\n              this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\n            } else {\n              this.timerValue.hours = \"00\";\n              this.timerValue.mins = \"00\";\n              this.timerValue.seconds = \"00\";\n              this.stopTimer();\n            }\n            obs.next(this.timerValue);\n            obs.complete();\n          }\n        },\n        /**\r\n        * @param {?} error\r\n        * @return {?}\r\n        */\n        error => {\n          obs.error(error);\n          obs.complete();\n        });\n      });\n    };\n    //set timer value\n    this.setTimervalue =\n    /**\r\n    * @param {?} val\r\n    * @return {?}\r\n    */\n    val => {\n      /** @type {?} */\n      let valString = val + \"\";\n      return valString.length < 2 ? \"0\" + valString : valString;\n    };\n    this.interval = interval(1000);\n  }\n}\nCountdownTimerService.ɵfac = function CountdownTimerService_Factory(t) {\n  return new (t || CountdownTimerService)();\n};\nCountdownTimerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: CountdownTimerService,\n  factory: CountdownTimerService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */CountdownTimerService.ngInjectableDef = defineInjectable({\n  factory: function CountdownTimerService_Factory() {\n    return new CountdownTimerService();\n  },\n  token: CountdownTimerService,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nlet CountdownTimerComponent = /*#__PURE__*/(() => {\n  class CountdownTimerComponent {\n    /**\r\n     * @param {?} countdownTimerService\r\n     */\n    constructor(countdownTimerService) {\n      this.countdownTimerService = countdownTimerService;\n      this.timerObj = {};\n      //get timer value\n      this.getTimerValue =\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        this.timerSubscription = this.countdownTimerService.getTimerValue().subscribe(\n        /**\r\n        * @param {?} res\r\n        * @return {?}\r\n        */\n        res => {\n          this.timerObj = Object.assign(res);\n        },\n        /**\r\n        * @param {?} error\r\n        * @return {?}\r\n        */\n        error => {\n          console.log(error);\n          console.log('Failed to get timer value');\n        });\n      };\n    }\n    /**\r\n     * @return {?}\r\n     */\n    ngOnInit() {\n      this.getTimerValue();\n      this.timerConfig = new countDownTimerConfigModel();\n      this.timerTextConfig = new countDownTimerTexts();\n      this.timerConfig = this.countDownTimerConfig ? Object.assign(this.countDownTimerConfig) : null;\n      this.timerTextConfig = this.countDownTimerConfig && this.countDownTimerConfig.timerTexts ? Object.assign(this.countDownTimerConfig.timerTexts) : null;\n    }\n    /**\r\n     * @return {?}\r\n     */\n    ngOnDestroy() {\n      this.timerSubscription.unsubscribe();\n    }\n  }\n  CountdownTimerComponent.ɵfac = function CountdownTimerComponent_Factory(t) {\n    return new (t || CountdownTimerComponent)(ɵngcc0.ɵɵdirectiveInject(CountdownTimerService));\n  };\n  CountdownTimerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CountdownTimerComponent,\n    selectors: [[\"countdown-timer\"]],\n    inputs: {\n      startTime: \"startTime\",\n      countDownTimerConfig: \"countDownTimerConfig\"\n    },\n    decls: 13,\n    vars: 8,\n    consts: [[1, \"time-category\"]],\n    template: function CountdownTimerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵelementStart(1, \"span\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"span\", 0);\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"span\");\n        ɵngcc0.ɵɵtext(6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 0);\n        ɵngcc0.ɵɵtext(8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\");\n        ɵngcc0.ɵɵtext(10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 0);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap((ctx.timerConfig == null ? null : ctx.timerConfig.timerClass) ? ctx.timerConfig.timerClass : \"\");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.timerObj.hours);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\"\", ctx.timerTextConfig && ctx.timerTextConfig.hourText ? ctx.timerTextConfig.hourText : \"hh\", \" \");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.timerObj.mins);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\"\", ctx.timerTextConfig && ctx.timerTextConfig.minuteText ? ctx.timerTextConfig.minuteText : \"mm\", \" \");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.timerObj.seconds);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.timerTextConfig && ctx.timerTextConfig.secondsText ? ctx.timerTextConfig.secondsText : \"ss\");\n      }\n    },\n    styles: [\"\"]\n  });\n  /** @nocollapse */\n  return CountdownTimerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass StopWatchService {\n  constructor() {\n    //Init\n    this.timerValue = {\n      miliseconds: '00',\n      seconds: '00',\n      mins: '00',\n      hours: '00'\n    };\n    this.isTimerStart = false;\n    this.totalSeconds = 0;\n    this.currentOperationId = 0;\n    //start timer\n    this.startTimer =\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      debugger;\n      this.isTimerStart = true;\n      return true;\n    };\n    //end timer\n    this.pauseTimer =\n    /**\r\n    * @param {?=} startTime\r\n    * @param {?=} endTime\r\n    * @return {?}\r\n    */\n    (startTime, endTime) => {\n      if (startTime && endTime) {\n        /** @type {?} */\n        let endedDate = new Date(endTime);\n        /** @type {?} */\n        let startedTime = new Date(startTime);\n        this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);\n      }\n      this.isTimerStart = false;\n      return false;\n    };\n    //reset Timer\n    this.stopTimer =\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      this.isTimerStart = false;\n      this.totalSeconds = 0;\n    };\n    //resume Timer\n    this.resumeTimer =\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      this.isTimerStart = true;\n    };\n    //get timer value Obj\n    this.getTimerValue =\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      return new Observable(\n      /**\r\n      * @param {?} obs\r\n      * @return {?}\r\n      */\n      obs => {\n        if (this.intervalSubscription) {\n          this.intervalSubscription.unsubscribe();\n        }\n        this.intervalSubscription = this.interval.subscribe(\n        /**\r\n        * @param {?} int\r\n        * @return {?}\r\n        */\n        int => {\n          if (this.isTimerStart && this.totalSeconds > 0) {\n            --this.totalSeconds;\n            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\n            /** @type {?} */\n            let totalSecondsForMinutes = 0;\n            totalSecondsForMinutes = Math.trunc(this.totalSeconds / 60) >= 60 ? this.totalSeconds / 60 % 60 : this.totalSeconds / 60;\n            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\n            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\n            obs.next(this.timerValue);\n            obs.complete();\n          } else {\n            if (this.totalSeconds > 0) {\n              this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\n              /** @type {?} */\n              let totalSecondsForMinutes = 0;\n              totalSecondsForMinutes = Math.trunc(this.totalSeconds / 60) >= 60 ? this.totalSeconds / 60 % 60 : this.totalSeconds / 60;\n              this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\n              this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\n            } else {\n              this.timerValue.hours = \"00\";\n              this.timerValue.mins = \"00\";\n              this.timerValue.seconds = \"00\";\n            }\n            obs.next(this.timerValue);\n            obs.complete();\n          }\n        },\n        /**\r\n        * @param {?} error\r\n        * @return {?}\r\n        */\n        error => {\n          obs.error(error);\n          obs.complete();\n        });\n      });\n    };\n    //set timer value\n    this.setTimervalue =\n    /**\r\n    * @param {?} val\r\n    * @return {?}\r\n    */\n    val => {\n      /** @type {?} */\n      let valString = val + \"\";\n      return valString.length < 2 ? \"0\" + valString : valString;\n    };\n    this.interval = interval(10000);\n  }\n}\nStopWatchService.ɵfac = function StopWatchService_Factory(t) {\n  return new (t || StopWatchService)();\n};\nStopWatchService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: StopWatchService,\n  factory: StopWatchService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */StopWatchService.ngInjectableDef = defineInjectable({\n  factory: function StopWatchService_Factory() {\n    return new StopWatchService();\n  },\n  token: StopWatchService,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nlet StopWatchComponent = /*#__PURE__*/(() => {\n  class StopWatchComponent {\n    // timerConfig: countDownTimerConfigModel;\n    // timerTextConfig: countDownTimerTexts;\n    /**\r\n     * @param {?} countdownTimerService\r\n     */\n    constructor(countdownTimerService) {\n      this.countdownTimerService = countdownTimerService;\n      this.timerObj = {};\n      //get timer value\n      this.getTimerValue =\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        this.timerSubscription = this.countdownTimerService.getTimerValue().subscribe(\n        /**\r\n        * @param {?} res\r\n        * @return {?}\r\n        */\n        res => {\n          this.timerObj = Object.assign(res);\n        },\n        /**\r\n        * @param {?} error\r\n        * @return {?}\r\n        */\n        error => {\n          console.log(error);\n          console.log('Failed to get timer value');\n        });\n      };\n    }\n    /**\r\n     * @return {?}\r\n     */\n    ngOnInit() {\n      this.getTimerValue();\n      // this.timerConfig = new countDownTimerConfigModel();\n      // this.timerTextConfig = new countDownTimerTexts();\n      // this.timerConfig = this.countDownTimerConfig ? Object.assign(this.countDownTimerConfig) : null;\n      // this.timerTextConfig = this.countDownTimerConfig && this.countDownTimerConfig.timerTexts ? Object.assign(this.countDownTimerConfig.timerTexts) :  null;\n    }\n    /**\r\n     * @return {?}\r\n     */\n    ngOnDestroy() {\n      this.timerSubscription.unsubscribe();\n    }\n  }\n  StopWatchComponent.ɵfac = function StopWatchComponent_Factory(t) {\n    return new (t || StopWatchComponent)(ɵngcc0.ɵɵdirectiveInject(StopWatchService));\n  };\n  StopWatchComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StopWatchComponent,\n    selectors: [[\"stop-watch\"]],\n    decls: 0,\n    vars: 0,\n    template: function StopWatchComponent_Template(rf, ctx) {},\n    styles: [\"\"]\n  });\n  /** @nocollapse */\n  return StopWatchComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nlet NgxTimerModule = /*#__PURE__*/(() => {\n  class NgxTimerModule {}\n  NgxTimerModule.ɵfac = function NgxTimerModule_Factory(t) {\n    return new (t || NgxTimerModule)();\n  };\n  NgxTimerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxTimerModule\n  });\n  NgxTimerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [CountupTimerService, CountdownTimerService, StopWatchService],\n    imports: [[CommonModule]]\n  });\n  return NgxTimerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxTimerModule, {\n    declarations: function () {\n      return [CountupTimerComponent, CountdownTimerComponent, StopWatchComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [CountupTimerComponent, CountdownTimerComponent, StopWatchComponent];\n    }\n  });\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxTimerModule, CountupTimerComponent, CountupTimerService, countUpTimerConfigModel, timerTexts, CountdownTimerComponent, CountdownTimerService, countDownTimerConfigModel, countDownTimerTexts, TimerStaus, StopWatchComponent as ɵa, StopWatchService as ɵb };\n\n//# sourceMappingURL=ngx-timer.js.map","map":null,"metadata":{},"sourceType":"module"}