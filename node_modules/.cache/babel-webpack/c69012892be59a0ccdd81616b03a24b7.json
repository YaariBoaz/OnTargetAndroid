{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { logger } from '@sentry/utils';\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\nvar Express = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Express(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = Express.id;\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n  /**\n   * @inheritDoc\n   */\n  Express.prototype.setupOnce = function () {\n    if (!this._router) {\n      logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n    instrumentMiddlewares(this._router, this._methods);\n  };\n  /**\n   * @inheritDoc\n   */\n  Express.id = 'Express';\n  return Express;\n}();\nexport { Express };\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn, method) {\n  var arity = fn.length;\n  switch (arity) {\n    case 2:\n      {\n        return function (req, res) {\n          var transaction = res.__sentry_transaction;\n          if (transaction) {\n            var span_1 = transaction.startChild({\n              description: fn.name,\n              op: \"express.middleware.\" + method\n            });\n            res.once('finish', function () {\n              span_1.finish();\n            });\n          }\n          return fn.call(this, req, res);\n        };\n      }\n    case 3:\n      {\n        return function (req, res, next) {\n          var _a;\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"express.middleware.\" + method\n          });\n          fn.call(this, req, res, function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n            var _a;\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, __spread([this], args));\n          });\n        };\n      }\n    case 4:\n      {\n        return function (err, req, res, next) {\n          var _a;\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"express.middleware.\" + method\n          });\n          fn.call(this, err, req, res, function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n            var _a;\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, __spread([this], args));\n          });\n        };\n      }\n    default:\n      {\n        throw new Error(\"Express middleware takes 2-4 arguments. Got: \" + arity);\n      }\n  }\n}\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapMiddlewareArgs(args, method) {\n  return args.map(function (arg) {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n    if (Array.isArray(arg)) {\n      return arg.map(function (a) {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n        return a;\n      });\n    }\n    return arg;\n  });\n}\n/**\n * Patches original router to utilize our tracing functionality\n */\nfunction patchMiddleware(router, method) {\n  var originalCallback = router[method];\n  router[method] = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return originalCallback.call.apply(originalCallback, __spread([this], wrapMiddlewareArgs(args, method)));\n  };\n  return router;\n}\n/**\n * Patches original router methods\n */\nfunction instrumentMiddlewares(router, methods) {\n  if (methods === void 0) {\n    methods = [];\n  }\n  methods.forEach(function (method) {\n    return patchMiddleware(router, method);\n  });\n}","map":{"version":3,"names":["__read","__spread","logger","Express","options","name","id","_router","router","app","_methods","Array","isArray","methods","concat","prototype","setupOnce","error","instrumentMiddlewares","wrap","fn","method","arity","length","req","res","transaction","__sentry_transaction","span_1","startChild","description","op","once","finish","call","next","_a","span","args","_i","arguments","apply","err","Error","wrapMiddlewareArgs","map","arg","a","patchMiddleware","originalCallback","forEach"],"sources":["/Applications/OnTarget/OnTarget/node_modules/@sentry/tracing/esm/integrations/node/express.js"],"sourcesContent":["import { __read, __spread } from \"tslib\";\nimport { logger } from '@sentry/utils';\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\nvar Express = /** @class */ (function () {\n    /**\n     * @inheritDoc\n     */\n    function Express(options) {\n        if (options === void 0) { options = {}; }\n        /**\n         * @inheritDoc\n         */\n        this.name = Express.id;\n        this._router = options.router || options.app;\n        this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n    }\n    /**\n     * @inheritDoc\n     */\n    Express.prototype.setupOnce = function () {\n        if (!this._router) {\n            logger.error('ExpressIntegration is missing an Express instance');\n            return;\n        }\n        instrumentMiddlewares(this._router, this._methods);\n    };\n    /**\n     * @inheritDoc\n     */\n    Express.id = 'Express';\n    return Express;\n}());\nexport { Express };\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn, method) {\n    var arity = fn.length;\n    switch (arity) {\n        case 2: {\n            return function (req, res) {\n                var transaction = res.__sentry_transaction;\n                if (transaction) {\n                    var span_1 = transaction.startChild({\n                        description: fn.name,\n                        op: \"express.middleware.\" + method,\n                    });\n                    res.once('finish', function () {\n                        span_1.finish();\n                    });\n                }\n                return fn.call(this, req, res);\n            };\n        }\n        case 3: {\n            return function (req, res, next) {\n                var _a;\n                var transaction = res.__sentry_transaction;\n                var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n                    description: fn.name,\n                    op: \"express.middleware.\" + method,\n                });\n                fn.call(this, req, res, function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var _a;\n                    (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n                    next.call.apply(next, __spread([this], args));\n                });\n            };\n        }\n        case 4: {\n            return function (err, req, res, next) {\n                var _a;\n                var transaction = res.__sentry_transaction;\n                var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n                    description: fn.name,\n                    op: \"express.middleware.\" + method,\n                });\n                fn.call(this, err, req, res, function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var _a;\n                    (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n                    next.call.apply(next, __spread([this], args));\n                });\n            };\n        }\n        default: {\n            throw new Error(\"Express middleware takes 2-4 arguments. Got: \" + arity);\n        }\n    }\n}\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapMiddlewareArgs(args, method) {\n    return args.map(function (arg) {\n        if (typeof arg === 'function') {\n            return wrap(arg, method);\n        }\n        if (Array.isArray(arg)) {\n            return arg.map(function (a) {\n                if (typeof a === 'function') {\n                    return wrap(a, method);\n                }\n                return a;\n            });\n        }\n        return arg;\n    });\n}\n/**\n * Patches original router to utilize our tracing functionality\n */\nfunction patchMiddleware(router, method) {\n    var originalCallback = router[method];\n    router[method] = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return originalCallback.call.apply(originalCallback, __spread([this], wrapMiddlewareArgs(args, method)));\n    };\n    return router;\n}\n/**\n * Patches original router methods\n */\nfunction instrumentMiddlewares(router, methods) {\n    if (methods === void 0) { methods = []; }\n    methods.forEach(function (method) { return patchMiddleware(router, method); });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}