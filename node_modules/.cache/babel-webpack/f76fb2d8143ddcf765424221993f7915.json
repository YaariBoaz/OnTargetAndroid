{"ast":null,"code":"/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\nimport { ConeColumn } from \"../elements/ConeColumn\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar ConeSeriesDataItem = /** @class */function (_super) {\n  __extends(ConeSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ConeSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ConeSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return ConeSeriesDataItem;\n}(ColumnSeriesDataItem);\nexport { ConeSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\nvar ConeSeries = /** @class */function (_super) {\n  __extends(ConeSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ConeSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ConeSeries\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Returns an element to use for Candlestick\r\n   * @ignore\r\n   * @return Element.\r\n   */\n  ConeSeries.prototype.createColumnTemplate = function () {\n    return new ConeColumn();\n  };\n  /**\r\n   * Returns an SVG path to use as series mask.\r\n   *\r\n   * @return SVG path\r\n   */\n  ConeSeries.prototype.getMaskPath = function () {\n    var dx = 0;\n    var dy = 0;\n    var column = this.columns.getIndex(0);\n    if (column) {\n      if (this.baseAxis == this.xAxis) {\n        dy = column.coneColumn.innerWidth / 2 + 1;\n      } else {\n        dx = column.coneColumn.innerHeight / 2 + 1;\n      }\n      return $path.rectToPath({\n        x: -dx,\n        y: 0,\n        width: this.xAxis.axisLength + dx,\n        height: this.yAxis.axisLength + dy\n      });\n    }\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  ConeSeries.prototype.validateDataElementReal = function (dataItem) {\n    _super.prototype.validateDataElementReal.call(this, dataItem);\n    var column = dataItem.column;\n    if (column) {\n      var coneColumn = dataItem.column.coneColumn;\n      coneColumn.fill = dataItem.column.fill;\n      if (this.baseAxis == this.yAxis) {\n        coneColumn.orientation = \"horizontal\";\n      } else {\n        coneColumn.orientation = \"vertical\";\n      }\n    }\n  };\n  return ConeSeries;\n}(ColumnSeries);\nexport { ConeSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\n//# sourceMappingURL=ConeSeries.js.map","map":null,"metadata":{},"sourceType":"module"}