{"ast":null,"code":"import _asyncToGenerator from \"/Applications/OnTarget/OnTarget/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { WebPlugin } from '@capacitor/core';\nimport * as FileSaver from 'file-saver';\nimport { WebUtils } from \"./web-utils\";\nexport class FileSharerPluginWeb extends WebPlugin {\n  share(options) {\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        if (!options.base64Data || options.base64Data.length == 0) {\n          reject(new Error(\"ERR_PARAM_NO_DATA\"));\n        } else if (!options.filename || options.filename.length == 0) {\n          reject(new Error(\"ERR_PARAM_NO_FILENAME\"));\n        } else if (!options.contentType || options.contentType.length == 0) {\n          reject(new Error(\"ERR_PARAM_NO_CONTENT_TYPE\"));\n        }\n        let blob = new Blob([WebUtils.toByteArray(options.base64Data)], {\n          type: options.contentType\n        });\n        FileSaver.saveAs(blob, options.filename);\n        resolve();\n      });\n    })();\n  }\n}","map":{"version":3,"names":["WebPlugin","FileSaver","WebUtils","FileSharerPluginWeb","share","options","Promise","resolve","reject","base64Data","length","Error","filename","contentType","blob","Blob","toByteArray","type","saveAs"],"sources":["/Applications/OnTarget/OnTarget/node_modules/@byteowls/capacitor-filesharer/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\nimport * as FileSaver from 'file-saver';\r\nimport { WebUtils } from \"./web-utils\";\r\nexport class FileSharerPluginWeb extends WebPlugin {\r\n    async share(options) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!options.base64Data || options.base64Data.length == 0) {\r\n                reject(new Error(\"ERR_PARAM_NO_DATA\"));\r\n            }\r\n            else if (!options.filename || options.filename.length == 0) {\r\n                reject(new Error(\"ERR_PARAM_NO_FILENAME\"));\r\n            }\r\n            else if (!options.contentType || options.contentType.length == 0) {\r\n                reject(new Error(\"ERR_PARAM_NO_CONTENT_TYPE\"));\r\n            }\r\n            let blob = new Blob([\r\n                WebUtils.toByteArray(options.base64Data)\r\n            ], {\r\n                type: options.contentType\r\n            });\r\n            FileSaver.saveAs(blob, options.filename);\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAO,KAAKC,SAAS,MAAM,YAAY;AACvC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,MAAMC,mBAAmB,SAASH,SAAS,CAAC;EACzCI,KAAK,CAACC,OAAO,EAAE;IAAA;MACjB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpC,IAAI,CAACH,OAAO,CAACI,UAAU,IAAIJ,OAAO,CAACI,UAAU,CAACC,MAAM,IAAI,CAAC,EAAE;UACvDF,MAAM,CAAC,IAAIG,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC1C,CAAC,MACI,IAAI,CAACN,OAAO,CAACO,QAAQ,IAAIP,OAAO,CAACO,QAAQ,CAACF,MAAM,IAAI,CAAC,EAAE;UACxDF,MAAM,CAAC,IAAIG,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC9C,CAAC,MACI,IAAI,CAACN,OAAO,CAACQ,WAAW,IAAIR,OAAO,CAACQ,WAAW,CAACH,MAAM,IAAI,CAAC,EAAE;UAC9DF,MAAM,CAAC,IAAIG,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAClD;QACA,IAAIG,IAAI,GAAG,IAAIC,IAAI,CAAC,CAChBb,QAAQ,CAACc,WAAW,CAACX,OAAO,CAACI,UAAU,CAAC,CAC3C,EAAE;UACCQ,IAAI,EAAEZ,OAAO,CAACQ;QAClB,CAAC,CAAC;QACFZ,SAAS,CAACiB,MAAM,CAACJ,IAAI,EAAET,OAAO,CAACO,QAAQ,CAAC;QACxCL,OAAO,EAAE;MACb,CAAC,CAAC;IAAC;EACP;AACJ"},"metadata":{},"sourceType":"module"}