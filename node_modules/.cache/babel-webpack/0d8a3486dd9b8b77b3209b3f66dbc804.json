{"ast":null,"code":"import { NgZone } from '@angular/core';\nimport { BLE } from '@awesome-cordova-plugins/ble/ngx';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { StorageService } from './storage.service';\nimport { GatewayService } from './gateway.service';\nimport { InitService } from './init.service';\nimport { ShootingService } from './shooting.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nimport * as i2 from \"@awesome-cordova-plugins/ble/ngx\";\nimport * as i3 from \"./shooting.service\";\nimport * as i4 from \"./init.service\";\nimport * as i5 from \"./gateway.service\";\nconst SERVICE_2 = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';\nconst SERVICE_2_CHAR = '6e400003-b5a3-f393-e0a9-e50e24dcca9e';\nconst SERVICE_2_CHAR_WRITE = '6e400002-b5a3-f393-e0a9-e50e24dcca9e';\nexport let BleService = /*#__PURE__*/(() => {\n  class BleService {\n    constructor(storage, ble, ngZone, shootingService, initService, gatewayService) {\n      this.storage = storage;\n      this.ble = ble;\n      this.ngZone = ngZone;\n      this.shootingService = shootingService;\n      this.initService = initService;\n      this.gatewayService = gatewayService;\n      this.msgNumber = 1;\n      this.notifyShotArrived = new BehaviorSubject(0);\n      this.notifyDisconnect = new BehaviorSubject(null);\n      this.notifyTargetConnected = new BehaviorSubject(false);\n      this.scanFinished = new BehaviorSubject(false);\n      this.isConnectedFlag = false;\n      this.notifyResetGateway = new BehaviorSubject(false);\n      this.gateways = [];\n      this.activateReconnectProcessCount = 0;\n      this.devices = this.storage.getItem('ble');\n      if (!this.devices) {\n        this.devices = [];\n      }\n    }\n    fakescan() {\n      this.ble.scan([], 1).subscribe();\n    }\n    // Scan for BLE devices\n    scan() {\n      this.devices = []; // clear list\n      this.storage.setItem('ble', this.devices);\n      this.ble.scan([], 5).subscribe(device => this.onDeviceDiscovered(device), error => this.scanError(error));\n      setTimeout(() => {\n        this.storage.setItem('ble', this.devices);\n        this.scanFinished.next(true);\n      }, 6000);\n    }\n    // When a BLE device is discovered we filter only the known devices.\n    onDeviceDiscovered(device) {\n      this.ngZone.run(() => {\n        if (device.name) {\n          console.log('FOUND DEVICE: ' + device.name);\n          if (device.name.toLowerCase().includes('adl') || device.name.toLowerCase().includes('e64') || device.name.toLowerCase().includes('e64n015') || device.name.toLowerCase().includes('e1n') || device.name.toLowerCase().includes('e1n') || device.name.toLowerCase().includes('eMarn') || device.name.toLowerCase().includes('003') || device.name.toLowerCase().includes('e16') || device.name.toLowerCase().includes('nordic')) {\n            if (this.devices.length === 0) {\n              this.devices.push(device);\n              this.storage.setItem('ble', this.devices);\n            } else if (this.devices.find(o => o.id === device.id) === undefined) {\n              this.devices.push(device);\n              this.storage.setItem('ble', this.devices);\n            }\n          } else if (device.name.toLowerCase().includes('egateway')) {\n            this.gateways.push(device.id);\n            this.isGateway = true;\n            this.initService.isGateway = true;\n            this.connect(device.id);\n          }\n        }\n      });\n    }\n    // If the connection crashes when it reconnects we reset the stats.\n    resetShots() {\n      this.gatewayService.initStats();\n      const txe = new TextEncoder();\n      if (this.peripheral && this.peripheral.id) {\n        this.ble.write(this.peripheral.id, SERVICE_2, SERVICE_2_CHAR_WRITE, txe.encode('CLCO\\n').buffer).then(prmise => {\n          console.log('From Reset: ' + prmise);\n        }).catch(err => {});\n      }\n    }\n    // NOT ACTIVE. -this was used when we wanted to let the user refresh the connection.\n    resetConnection() {\n      const txe = new TextEncoder();\n      if (this.peripheral && this.peripheral.id) {\n        this.ble.write(this.peripheral.id, SERVICE_2, SERVICE_2_CHAR_WRITE, txe.encode('RSTC\\n').buffer).then(prmise => {\n          console.log('reset connection completed');\n        }).catch(err => {});\n      }\n    }\n    // If location permission is denied, you'll end up here\n    scanError(error) {\n      console.log('Error: ' + error);\n    }\n    getDevices() {\n      return this.devices;\n    }\n    // Sets the target to listen for message from.\n    connect(deviceId) {\n      console.log('FROM BLE CONNECT: ', deviceId);\n      if (deviceId) {\n        if (this.gateways.indexOf(deviceId) > -1) {\n          this.isGateway = true;\n          this.initService.isGateway = true;\n        } else {\n          this.resetShots();\n        }\n        this.currentTargetId = deviceId;\n        this.ble.connect(deviceId).subscribe(peripheral => {\n          this.isConnectedFlag = false;\n          this.notifyTargetConnected.next(true);\n          this.onConnected(peripheral);\n        }, peripheral => {\n          console.log('DEVICE DISCONNECT IT SELF', peripheral);\n          this.activatRecconectProcess();\n        }, () => {});\n      }\n    }\n    //  Notify comps that a connection has been made.\n    onConnected(peripheral) {\n      this.isConnectedFlag = false;\n      if (!this.isGateway) {\n        this.resetShots();\n      }\n      console.log('Connected to ' + peripheral.name + ' ' + peripheral.id);\n      this.ngZone.run(() => {\n        this.peripheral = peripheral;\n      });\n      this.handleRead(peripheral.name, peripheral.id, SERVICE_2, SERVICE_2_CHAR);\n    }\n    //  Notify comps that a connection has been lost.\n    onDeviceDisconnected(peripheral) {}\n    ionViewDidLoad() {\n      console.log('ionViewDidLoad DetailPage');\n    }\n    ionViewWillLeave() {\n      console.log('ionViewWillLeave disconnecting Bluetooth');\n      this.ble.disconnect(this.peripheral.id).then(() => console.log('Disconnected ' + JSON.stringify(this.peripheral)), () => console.log('ERROR disconnecting ' + JSON.stringify(this.peripheral)));\n    }\n    handleRead(name, id, service, characteristic) {\n      console.log('SUBSCRIBED TO START NOTIFICATION');\n      this.subscription = this.ble.startNotification(id, service, characteristic).subscribe(data => {\n        const target = this.storage.getItem('slectedTarget');\n        const dec = new TextDecoder();\n        const enc = new TextEncoder().encode(data);\n        const temp = new TextDecoder().decode(enc);\n        const buffer = new Uint8Array(data[0]);\n        if (this.isGateway) {\n          this.parseGatewayMessage(buffer);\n        } else {\n          if (dec.decode(buffer) === 'Clear') {\n            console.log('Target cleared shots');\n          } else {\n            // @ts-ignore\n            const encoder = new TextEncoder();\n            // @ts-ignore\n            const encodedString = encoder.encode(buffer);\n            // tslint:disable-next-line:radix\n            const text = parseInt(dec.decode(encodedString));\n            this.notifyShotArrived.next(text);\n            this.ngZone.run(() => {\n              console.log('Read from: ' + service + ' ' + service + ' has arrived: ' + text);\n            });\n          }\n        }\n      });\n    }\n    parseGatewayMessage(buffer) {\n      const selectedTarget = this.shootingService.chosenTarget;\n      const target = this.storage.getItem('slectedTarget');\n      const messageFromGatewaty = String.fromCharCode.apply(null, buffer);\n      if (messageFromGatewaty.indexOf(',B,') > -1) {\n        this.gatewayService.processData(messageFromGatewaty);\n      } else if (selectedTarget && messageFromGatewaty.indexOf(',S,') > -1 && messageFromGatewaty.indexOf(selectedTarget.name) > -1) {\n        this.gatewayService.processData(messageFromGatewaty);\n      } else if (messageFromGatewaty.indexOf('Connecting') > -1) {\n        this.gatewayTargets = {\n          gateway: this.currentTargetId,\n          target: messageFromGatewaty.split(' ')[3]\n        };\n        this.notifyTargetConnected.next(true);\n      } else if (messageFromGatewaty.indexOf('Disconnected') > -1) {\n        this.activatRecconectProcess();\n      } else if (messageFromGatewaty.indexOf(',SZ,') > -1) {\n        this.gatewayService.processData(messageFromGatewaty);\n      }\n    }\n    isConnected() {\n      return this.ble.isConnected(this.peripheral.id);\n    }\n    dissconect() {\n      return this.ble.disconnect(this.currentTargetId);\n    }\n    activatRecconectProcess() {\n      this.ble.disconnect(this.currentTargetId).then(() => {\n        this.isConnectedFlag = false;\n        this.notifyDisconnect.next({\n          isManually: false,\n          status: true\n        });\n        console.log('Called Disconnect');\n        try {\n          this.subscription = this.ble.connect(this.currentTargetId).subscribe(peripheral => {\n            this.isConnectedFlag = false;\n            this.notifyTargetConnected.next(true);\n            this.onConnected(peripheral);\n          }, peripheral => {\n            console.log('Disconnected', 'The peripheral unexpectedly disconnected');\n            if (this.activateReconnectProcessCount < 5) {\n              this.activateReconnectProcessCount++;\n              this.activatRecconectProcess();\n            } else {\n              this.activateReconnectProcessCount = 0;\n            }\n          });\n        } catch (e) {}\n      });\n    }\n    resetGateway() {\n      this.ble.write(this.currentTargetId, SERVICE_2, SERVICE_2_CHAR_WRITE, this.str2ab('R')).then(data => {\n        this.notifyResetGateway.next(true);\n      });\n    }\n    str2ab(str) {\n      const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n      const bufView = new Uint16Array(buf);\n      for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n      }\n      return buf;\n    }\n  }\n  BleService.ɵfac = function BleService_Factory(t) {\n    return new (t || BleService)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.BLE), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i3.ShootingService), i0.ɵɵinject(i4.InitService), i0.ɵɵinject(i5.GatewayService));\n  };\n  BleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BleService,\n    factory: BleService.ɵfac,\n    providedIn: 'root'\n  });\n  return BleService;\n})();","map":null,"metadata":{},"sourceType":"module"}