{"ast":null,"code":"/**\r\n * A collection of keyboard-related utilities accessible via `keyboard`\r\n * instance.\r\n */\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * A class that represents collection of keyboard-related utilities.\r\n *\r\n * Do not instantiate this class directly, but rather use `keyboard` variable.\r\n */\nvar Keyboard = /** @class */function () {\n  function Keyboard() {}\n  /**\r\n   * Returns a named key based on information contained in the event or\r\n   * \"other\".\r\n   *\r\n   * @param ev  A keyboard event\r\n   * @return Keyboard named key\r\n   */\n  Keyboard.prototype.getEventKey = function (ev) {\n    // Get the key code\n    var code = ev.keyCode || ev.which,\n      key;\n    // Map to internal key\n    switch (code) {\n      case 38:\n        key = \"up\";\n        break;\n      case 40:\n        key = \"down\";\n        break;\n      case 37:\n        key = \"left\";\n        break;\n      case 39:\n        key = \"right\";\n        break;\n      case 13:\n        key = \"enter\";\n        break;\n      case 27:\n        key = \"esc\";\n        break;\n      case 36:\n        key = \"home\";\n        break;\n      case 35:\n        key = \"end\";\n        break;\n      case 9:\n        key = \"tab\";\n        break;\n      case 17:\n        key = \"ctrl\";\n        break;\n      case 18:\n        key = \"alt\";\n        break;\n      case 16:\n        key = \"shift\";\n        break;\n      case 32:\n        key = \"space\";\n        break;\n      case 36:\n        key = \"home\";\n        break;\n      case 35:\n        key = \"end\";\n        break;\n      case 33:\n        key = \"pgup\";\n        break;\n      case 34:\n        key = \"pgdn\";\n        break;\n      case 45:\n        key = \"ins\";\n        break;\n      case 46:\n        key = \"del\";\n        break;\n      case 107:\n        key = \"plus\";\n        break;\n      case 109:\n        key = \"minus\";\n        break;\n      default:\n        key = \"other\";\n        break;\n    }\n    return key;\n  };\n  /**\r\n   * Checks if event key is one or more of the selected named keys.\r\n   *\r\n   * @param ev   Keyboard event\r\n   * @param key  Named key or array of keys\r\n   * @return Is event key one of the list?\r\n   */\n  Keyboard.prototype.isKey = function (ev, key) {\n    var eventKey = this.getEventKey(ev);\n    if ($type.isString(key)) {\n      key = [key];\n    }\n    return key.indexOf(eventKey) !== -1;\n  };\n  /**\r\n   * Returns `true` if shift key was presset at the moment of the event.\r\n   *\r\n   * @param ev  Event object\r\n   * @return Was shift pressed?\r\n   */\n  Keyboard.prototype.shiftKey = function (ev) {\n    return ev.shiftKey;\n  };\n  /**\r\n   * Returns `true` if ctrl key was presset at the moment of the event.\r\n   *\r\n   * @param ev  Event object\r\n   * @return Was ctrl pressed?\r\n   */\n  Keyboard.prototype.ctrlKey = function (ev) {\n    return ev.ctrlKey;\n  };\n  /**\r\n   * Returns `true` if alt key was presset at the moment of the event\r\n   * @param ev  Event object\r\n   * @return Was alt pressed?\r\n   */\n  Keyboard.prototype.altKey = function (ev) {\n    return ev.altKey;\n  };\n  /**\r\n   * Returns `true` if meta key was presset at the moment of the event\r\n   * @param ev  Event object\r\n   * @return Was meta pressed?\r\n   */\n  Keyboard.prototype.metaKey = function (ev) {\n    return ev.metaKey;\n  };\n  return Keyboard;\n}();\nexport { Keyboard };\n/**\r\n * A single [[Keyboard]] instance to be reused across all elements so that\r\n * they don't need to instantiate their own.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var keyboard = new Keyboard();\n//# sourceMappingURL=Keyboard.js.map","map":null,"metadata":{},"sourceType":"module"}