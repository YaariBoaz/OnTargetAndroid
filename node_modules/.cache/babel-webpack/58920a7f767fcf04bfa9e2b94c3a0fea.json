{"ast":null,"code":"/**\r\n * Module for \"Drop Shadow\" filter.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Filter } from \"./Filter\";\nimport { color } from \"../../utils/Color\";\nimport { registry } from \"../../Registry\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creats a \"Drop Shadow\" filter.\r\n */\nvar DropShadowFilter = /** @class */function (_super) {\n  __extends(DropShadowFilter, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DropShadowFilter() {\n    var _this = _super.call(this) || this;\n    _this.className = \"DropShadowFilter\";\n    // Create elements\n    // NOTE: we do not need to add each individual element to `_disposers`\n    // because `filterPrimitives` has an event handler which automatically adds\n    // anything added to it to `_disposers`\n    _this.color = color(\"#000\");\n    _this.feGaussianBlur = _this.paper.add(\"feGaussianBlur\");\n    _this.feGaussianBlur.attr({\n      \"result\": \"blurOut\",\n      \"in\": \"SourceGraphic\"\n    });\n    _this.filterPrimitives.push(_this.feGaussianBlur);\n    _this.feOffset = _this.paper.add(\"feOffset\");\n    _this.feOffset.attr({\n      \"result\": \"offsetBlur\"\n    });\n    _this.filterPrimitives.push(_this.feOffset);\n    _this.feFlood = _this.paper.add(\"feFlood\");\n    _this.feFlood.attr({\n      \"flood-color\": _this.color\n    });\n    _this.filterPrimitives.push(_this.feFlood);\n    _this.feComposite = _this.paper.add(\"feComposite\");\n    _this.feComposite.attr({\n      \"in2\": \"offsetBlur\",\n      operator: \"in\"\n    });\n    _this.filterPrimitives.push(_this.feComposite);\n    _this.feMerge = _this.paper.addGroup(\"feMerge\");\n    _this.feMerge.add(_this.paper.add(\"feMergeNode\"));\n    _this.feMerge.add(_this.paper.add(\"feMergeNode\").attr({\n      \"in\": \"SourceGraphic\"\n    }));\n    _this.filterPrimitives.push(_this.feMerge);\n    // Set default properties\n    _this.width = 200;\n    _this.height = 200;\n    _this.blur = 1.5;\n    _this.dx = 3;\n    _this.dy = 3;\n    _this.opacity = 0.5;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(DropShadowFilter.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      return this.properties.color;\n    },\n    /**\r\n     * Shadow color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.properties.color = value;\n      if (this.feFlood) {\n        this.feFlood.attr({\n          \"flood-color\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropShadowFilter.prototype, \"opacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.properties.opacity;\n    },\n    /**\r\n     * Opacity of the shadow. (0-1)\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      this.properties.opacity = value;\n      this.feFlood.attr({\n        \"flood-opacity\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropShadowFilter.prototype, \"dx\", {\n    /**\r\n     * @return Horizontal offset (px)\r\n     */\n    get: function () {\n      return this.properties.dx;\n    },\n    /**\r\n     * Horizontal offset in pixels.\r\n     *\r\n     * @param value  Horizontal offset (px)\r\n     */\n    set: function (value) {\n      this.properties.dx = value;\n      this.feOffset.attr({\n        \"dx\": value / this.scale\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropShadowFilter.prototype, \"dy\", {\n    /**\r\n     * @return Vertical offset (px)\r\n     */\n    get: function () {\n      return this.properties.dy;\n    },\n    /**\r\n     * Vertical offset in pixels.\r\n     *\r\n     * @param value Vertical offset (px)\r\n     */\n    set: function (value) {\n      this.properties.dy = value;\n      this.feOffset.attr({\n        \"dy\": value / this.scale\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropShadowFilter.prototype, \"blur\", {\n    /**\r\n     * @return Blur\r\n     */\n    get: function () {\n      return this.properties.blur;\n    },\n    /**\r\n     * Blur.\r\n     *\r\n     * @param value  Blur\r\n     */\n    set: function (value) {\n      this.properties.blur = value;\n      this.feGaussianBlur.attr({\n        \"stdDeviation\": value / this.scale\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [updateScale description]\r\n   *\r\n   * @todo Description\r\n   */\n  DropShadowFilter.prototype.updateScale = function () {\n    this.dx = this.dx;\n    this.dy = this.dy;\n    this.blur = this.blur;\n  };\n  return DropShadowFilter;\n}(Filter);\nexport { DropShadowFilter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"DropShadowFilter\"] = DropShadowFilter;\n//# sourceMappingURL=DropShadowFilter.js.map","map":null,"metadata":{},"sourceType":"module"}