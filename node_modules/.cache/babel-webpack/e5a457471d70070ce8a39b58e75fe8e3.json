{"ast":null,"code":"/**\r\n * Sliced chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar SlicedChartDataItem = /** @class */function (_super) {\n  __extends(SlicedChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SlicedChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"SlicedChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return SlicedChartDataItem;\n}(PercentChartDataItem);\nexport { SlicedChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\nvar SlicedChart = /** @class */function (_super) {\n  __extends(SlicedChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SlicedChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"SlicedChart\";\n    _this.seriesContainer.layout = \"horizontal\";\n    _this.padding(15, 15, 15, 15);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  SlicedChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Sliced chart\");\n    }\n  };\n  /**\r\n   * (Re)validates the chart, causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SlicedChart.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n  };\n  return SlicedChart;\n}(PercentChart);\nexport { SlicedChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\n//# sourceMappingURL=SlicedChart.js.map","map":null,"metadata":{},"sourceType":"module"}