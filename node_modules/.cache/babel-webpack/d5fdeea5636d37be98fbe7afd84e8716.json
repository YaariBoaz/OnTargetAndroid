{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ChangeDetectorRef, NgZone } from '@angular/core';\nimport { ShootingService } from '../services/shooting.service';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { StorageService } from '../services/storage.service';\nimport { BleService } from '../services/ble.service';\nimport { AlertController, LoadingController, Platform, ToastController } from '@ionic/angular';\nimport { HitNohitService } from '../drill/hit-nohit.service';\nimport { ScreenOrientation } from '@ionic-native/screen-orientation/ngx';\nimport { NativePageTransitions } from '@ionic-native/native-page-transitions/ngx';\nimport { InitService } from '../services/init.service';\nimport { BLE } from '@awesome-cordova-plugins/ble/ngx';\nimport { GatewayService } from '../services/gateway.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AndroidPermissions } from '@awesome-cordova-plugins/android-permissions/ngx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../services/ble.service\";\nimport * as i3 from \"../services/storage.service\";\nimport * as i4 from \"../services/shooting.service\";\nimport * as i5 from \"@ionic/angular\";\nimport * as i6 from \"../drill/hit-nohit.service\";\nimport * as i7 from \"@awesome-cordova-plugins/ble/ngx\";\nimport * as i8 from \"@angular/material/dialog\";\nimport * as i9 from \"../services/gateway.service\";\nimport * as i10 from \"@awesome-cordova-plugins/android-permissions/ngx\";\nimport * as i11 from \"@ionic-native/screen-orientation/ngx\";\nimport * as i12 from \"../services/init.service\";\nimport * as i13 from \"@ionic-native/native-page-transitions/ngx\";\nimport * as i14 from \"@angular/router\";\nimport * as i15 from \"@angular/common\";\nfunction SelectTargetComponent_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function SelectTargetComponent_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.reScan();\n    });\n    i0.ɵɵtext(1, \"connect to target \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SelectTargetComponent_p_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 11);\n    i0.ɵɵtext(1, \" If you don\\u2019t see your Target in the list, please go to Bluetooth settings and make sure your device is paired \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SelectTargetComponent_div_11_img_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 14);\n  }\n}\nfunction SelectTargetComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, SelectTargetComponent_div_11_img_1_Template, 1, 0, \"img\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.isScanning);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"selected\": a0\n  };\n};\nfunction SelectTargetComponent_ul_12_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 17);\n    i0.ɵɵlistener(\"click\", function SelectTargetComponent_ul_12_li_1_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const item_r8 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.onTargetSelected(item_r8);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, item_r8.isSelected));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r8.name);\n  }\n}\nfunction SelectTargetComponent_ul_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 15);\n    i0.ɵɵtemplate(1, SelectTargetComponent_ul_12_li_1_Template, 2, 4, \"li\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.myTargets);\n  }\n}\nconst SERVICE_1 = '1800';\nconst SERVICE_2 = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';\nconst SERVICE_2_CHAR = '6e400003-b5a3-f393-e0a9-e50e24dcca9e';\nconst SERVICE_2_CHAR_WRITE = '6e400002-b5a3-f393-e0a9-e50e24dcca9e';\nconst READ_WRITE = '2a00';\nconst READ = '2a01';\nconst READ1 = '2a04';\nconst READ2 = '2a06';\nexport let SelectTargetComponent = /*#__PURE__*/(() => {\n  class SelectTargetComponent {\n    constructor(http, bleService, storageService, shootingService, loadingController, hitNohitService, ble, dialog, gatewayService, androidPermissions, ngZone, screenOrientation, cd, toastController, zone, initService, nativePageTransitions, platform, aletMdl, router) {\n      this.http = http;\n      this.bleService = bleService;\n      this.storageService = storageService;\n      this.shootingService = shootingService;\n      this.loadingController = loadingController;\n      this.hitNohitService = hitNohitService;\n      this.ble = ble;\n      this.dialog = dialog;\n      this.gatewayService = gatewayService;\n      this.androidPermissions = androidPermissions;\n      this.ngZone = ngZone;\n      this.screenOrientation = screenOrientation;\n      this.cd = cd;\n      this.toastController = toastController;\n      this.zone = zone;\n      this.initService = initService;\n      this.nativePageTransitions = nativePageTransitions;\n      this.platform = platform;\n      this.aletMdl = aletMdl;\n      this.router = router;\n      this.BASE_URL_HTTP = '192.168.0.86:8087';\n      this.chosenTarget = null;\n      this.myTargets = [];\n      this.targetConnected = false;\n      this.selectedTarget = null;\n      this.isFromWizard = false;\n      this.targetIsConnected = false;\n      this.targetNotSelected = true;\n      this.connectedClicked = false;\n      this.isScanning = false;\n      this.personalChosen = false;\n      this.isPersonalTargetAround = false;\n      this.myTargetsForKeepAlive = [];\n      this.targets = [];\n      this.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.PORTRAIT);\n      this.isiOS = this.platform.is('ios');\n    }\n    ngOnInit() {\n      // this.targetConnected = this.bleService.isConnectedFlag;\n      this.platform.ready().then(() => {\n        this.screenOrientation.unlock();\n        this.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.PORTRAIT).then(data => {});\n      });\n      this.gatewayService.notifyKeepAlive.subscribe(data => {\n        if (this.myTargetsForKeepAlive && this.myTargetsForKeepAlive.length) {\n          this.myTargetsForKeepAlive.forEach(target => {\n            if (data === target.target) {\n              target.date = new Date();\n            }\n          });\n        }\n      });\n      setInterval(() => {\n        const now = new Date();\n        this.myTargetsForKeepAlive.forEach(target => {\n          const seconds = (target.date.getTime() - now.getTime()) / 1000;\n          if (seconds >= 5) {\n            this.myTargets = this.myTargets.filter(o => o.name === target.name);\n          }\n        });\n      }, 5000);\n      this.gatewayService.notifyTargetConnectedToGateway.subscribe(data => {\n        if (data) {\n          let flag = false;\n          this.myTargets.forEach(target => {\n            if (target.name.indexOf(data) > -1) {\n              flag = true;\n            }\n          });\n          if (!flag) {\n            if (data !== true && data !== 'true') {\n              this.myTargets.push({\n                name: data\n              });\n              this.myTargetsForKeepAlive.push({\n                target: data,\n                date: new Date()\n              });\n              this.cd.detectChanges();\n            }\n          }\n        }\n      });\n      this.personalTarget = this.storageService.getItem('personalTarget');\n      this.bleService.scanFinished.subscribe(flag => {\n        this.isScanning = false;\n        if (flag) {\n          if (this.loading) {\n            this.loading.dismiss();\n          }\n        }\n      });\n    }\n    ionViewWillLeave() {\n      const options = {\n        direction: 'up',\n        duration: 500,\n        slowdownfactor: 3,\n        slidePixels: 20,\n        iosdelay: 100,\n        androiddelay: 150,\n        fixedPixelsTop: 0,\n        fixedPixelsBottom: 60\n      };\n      this.nativePageTransitions.slide(options).then(() => {}).catch(() => {});\n    }\n    clearPrimaryFromList() {\n      // @ts-ignore\n      if (this.myTargets && this.primaryTarget && this.primaryTarget.id) {\n        this.myTargets = this.myTargets.filter(obj => {\n          // @ts-ignore\n          return obj.id !== this.primaryTarget.id;\n        });\n      }\n    }\n    showToast(msg, color) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastController.create({\n          message: msg,\n          color,\n          duration: 2000\n        });\n        toast.present();\n      });\n    }\n    showConnectingLoader() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.loading = yield this.loadingController.create({\n          duration: 5000,\n          message: 'Connecting to target',\n          translucent: true,\n          cssClass: 'custom-class custom-loading',\n          backdropDismiss: true\n        });\n        yield this.loading.present();\n      });\n    }\n    onTargetChosen() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.shootingService.chosenTarget = this.selectedTarget;\n        this.targetIsConnected = true;\n      });\n    }\n    startTraining() {\n      this.hitNohitService.resetDrill();\n      this.router.navigateByUrl('choose');\n    }\n    onBackPressed() {\n      this.router.navigateByUrl('home');\n    }\n    onGetTargets() {\n      this.shootingService.setTargetsI();\n    }\n    confirmationAlert(message) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let resolveFunction;\n        const promise = new Promise(resolve => {\n          resolveFunction = resolve;\n        });\n        const alert = yield this.aletMdl.create({\n          header: 'Confirmation',\n          message,\n          backdropDismiss: false,\n          buttons: [{\n            text: 'No',\n            handler: () => resolveFunction(false)\n          }, {\n            text: 'Yes',\n            handler: () => resolveFunction(true)\n          }]\n        });\n        yield alert.present();\n        return promise;\n      });\n    }\n    reScan() {\n      this.isScanning = true;\n      this.initGatewayScan();\n    }\n    onTargetSelected(target) {\n      this.myTargets.forEach(t => t.isSelected = false);\n      target.isSelected = true;\n      this.storageService.setItem('slectedTarget', target);\n      this.shootingService.isTargetConnected = true;\n      this.selectedTarget = target;\n      this.cd.detectChanges();\n      // If its not a gateway we need to connect directly to the target.\n      if (target.id) {\n        if (this.bleService.isGateway) {\n          this.bleService.dissconect().then(data => {\n            this.bleService.isGateway = false;\n            this.bleService.connect(target.uuid);\n            this.bleService.notifyTargetConnected.subscribe(d => {\n              this.isConnected = true;\n              this.targetNotSelected = false;\n              this.cd.detectChanges();\n            });\n          });\n        } else {\n          this.bleService.connect(target.uuid);\n          this.bleService.notifyTargetConnected.subscribe(data => {\n            this.isConnected = true;\n            this.targetNotSelected = false;\n            this.cd.detectChanges();\n          });\n        }\n      } else {\n        this.isConnected = true;\n        this.targetNotSelected = false;\n        this.cd.detectChanges();\n      }\n    }\n    onGoToEditDrill() {\n      this.shootingService.chosenTarget = this.selectedTarget;\n      if (!this.initService.isGateway) {\n        this.shootingService.chosenTarget = this.selectedTarget;\n        this.targetIsConnected = true;\n        this.zone.run(() => {\n          // Your router is here\n          this.router.navigateByUrl('choose');\n        });\n      }\n      this.router.navigateByUrl('choose');\n    }\n    onDiscconectTest() {\n      ////  this.bleService.distory();\n    }\n    initGatewayScan() {\n      this.gatewayService.targets = [];\n      this.myTargets = [];\n      this.ble.scan([], 5).subscribe(device => this.onDeviceDiscoveredInitialScan(device), error => this.scanErrorInitialScan(error));\n      setTimeout(() => {\n        this.isScanning = false;\n        if (!this.targetNotSelected) {\n          this.addTargetToList(this.selectedTarget);\n        }\n      }, 5500);\n    }\n    scanErrorInitialScan(error) {\n      this.androidPermissions.requestPermissions([this.androidPermissions.PERMISSION.BLUETOOTH_SCAN]).then(r => {\n        console.log(r);\n      });\n      this.androidPermissions.requestPermissions([this.androidPermissions.PERMISSION.BLUETOOTH_CONNECT]).then(r => {\n        console.log(r);\n      });\n      this.androidPermissions.requestPermissions([this.androidPermissions.PERMISSION.ACCESS_COARSE_LOCATION]).then(r => {\n        console.log(r);\n      });\n      this.androidPermissions.requestPermissions([this.androidPermissions.PERMISSION.ACCESS_FINE_LOCATION]).then(r => {\n        console.log(r);\n      });\n    }\n    onDeviceDiscoveredInitialScan(device) {\n      if (device.name) {\n        console.log('FOUND DEVICE:  IN SELECT-TRAGET-COMPONET' + device.name);\n        if (device.name && device.name.toLowerCase().includes('adl') || device.name.toLowerCase().includes('e64') || device.name.toLowerCase().includes('e1n') || device.name.toLowerCase().includes('e1n') || device.name.toLowerCase().includes('eMarn') || device.name.toLowerCase().includes('17') || device.name.toLowerCase().includes('003') || device.name.toLowerCase().includes('e16') || device.name.toLowerCase().includes('nordic')) {\n          this.addTargetToList({\n            name: device.name,\n            id: device.id\n          });\n        } else if (device.name && device.name.toLowerCase().includes('egateway')) {\n          this.bleService.gateways.push(device.id);\n          this.bleService.isGateway = true;\n          this.initService.isGateway = true;\n          this.isConnected = true;\n          debugger;\n          this.bleService.currentTargetId = device.id;\n          console.log('GATEWAY IS: ', device);\n          console.log('UUUID OF GATEWAY IS: ', device.id);\n          this.bleService.connect(device.id);\n          console.log('UUUID OF GATEWAY I WANTED : ', this.bleService.currentTargetId);\n        }\n      }\n    }\n    onConnectedForTargetName(peripheral) {\n      console.log('CONNECTED - Gateway/Target Connected ', peripheral);\n      this.handleReadForTargetName(peripheral.id, SERVICE_2, SERVICE_2_CHAR);\n    }\n    // tslint:disable-next-line:no-shadowed-variable\n    handleReadForTargetName(id, service, characteristic) {\n      this.ble.startNotification(id, service, characteristic).subscribe(data => {\n        const dec = new TextDecoder();\n        const enc = new TextEncoder();\n        const buffer = new Uint8Array(data);\n        this.parseGatewayMessage(buffer, id);\n      });\n    }\n    parseGatewayMessage(buffer, id) {\n      const messageFromGatewaty = String.fromCharCode.apply(null, buffer);\n      console.log('MESSAGE: ', messageFromGatewaty);\n      if (messageFromGatewaty.indexOf('<') > -1) {\n        this.processData(messageFromGatewaty, id);\n      }\n    }\n    processData(input, id) {\n      const dataArray = input.replace('<,', '').replace(',>', '').split(',');\n      const dataLength = dataArray.length;\n      if (dataLength === 4) {\n        const primB = dataArray[1];\n        switch (primB) {\n          case 'B':\n            this.handleBatteryPrecentage_MSG(dataArray, id);\n            break;\n          default:\n            break;\n        }\n      } else {\n        console.error('ProcessData Invalid: {0}, Not 4 Length', input);\n      }\n    }\n    handleBatteryPrecentage_MSG(dataArray, id) {\n      const targetName = dataArray[0];\n      this.addTargetToList({\n        name: targetName,\n        id\n      });\n    }\n    distory() {\n      this.ble.disconnect(this.currentTargetId).then(() => {\n        console.log('Called Disconnect');\n      });\n    }\n    addTargetToList(target) {\n      let flag = false;\n      this.myTargets.forEach(t => {\n        if (t.name === target.name) {\n          flag = true;\n        }\n      });\n      if (!flag) {\n        if (target !== true && target !== 'true') {\n          this.myTargets.push(target);\n          this.myTargetsForKeepAlive.push({\n            target,\n            date: new Date()\n          });\n          this.cd.detectChanges();\n        }\n      }\n    }\n    setSelectedTarget(item) {\n      this.targets.forEach(x => x.isSelected = false);\n      item.isSelected = true;\n    }\n  }\n  SelectTargetComponent.ɵfac = function SelectTargetComponent_Factory(t) {\n    return new (t || SelectTargetComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.BleService), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.ShootingService), i0.ɵɵdirectiveInject(i5.LoadingController), i0.ɵɵdirectiveInject(i6.HitNohitService), i0.ɵɵdirectiveInject(i7.BLE), i0.ɵɵdirectiveInject(i8.MatDialog), i0.ɵɵdirectiveInject(i9.GatewayService), i0.ɵɵdirectiveInject(i10.AndroidPermissions), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i11.ScreenOrientation), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i5.ToastController), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i12.InitService), i0.ɵɵdirectiveInject(i13.NativePageTransitions), i0.ɵɵdirectiveInject(i5.Platform), i0.ɵɵdirectiveInject(i5.AlertController), i0.ɵɵdirectiveInject(i14.Router));\n  };\n  SelectTargetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SelectTargetComponent,\n    selectors: [[\"app-select-target\"]],\n    decls: 15,\n    vars: 7,\n    consts: [[1, \"target-selection\"], [1, \"back-container\", 3, \"click\"], [\"width\", \"20\", \"height\", \"16\", \"viewBox\", \"0 0 20 16\", \"fill\", \"none\", \"xmlns\", \"http://www.w3.org/2000/svg\"], [\"d\", \"M0 7.86914L11.6769 15.6191V11.4438H19.9286V4.29445H11.6769V0.119141L0 7.86914Z\", \"fill\", \"white\"], [1, \"title\"], [\"class\", \"connect\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"explanation-text\", 4, \"ngIf\"], [\"class\", \"ble-img\", 4, \"ngIf\"], [\"class\", \"target-list\", 4, \"ngIf\"], [1, \"continue\", 3, \"disabled\", \"click\"], [1, \"connect\", 3, \"click\"], [1, \"explanation-text\"], [1, \"ble-img\"], [\"class\", \"scanAnimation\", \"src\", \"assets/icons/Group%20770.svg\", 4, \"ngIf\"], [\"src\", \"assets/icons/Group%20770.svg\", 1, \"scanAnimation\"], [1, \"target-list\"], [3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"click\"]],\n    template: function SelectTargetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0);\n        i0.ɵɵelementStart(1, \"header\");\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵlistener(\"click\", function SelectTargetComponent_Template_div_click_2_listener() {\n          return ctx.onBackPressed();\n        });\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(3, \"svg\", 2);\n        i0.ɵɵelement(4, \"path\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(5, \"p\", 4);\n        i0.ɵɵtext(6, \"Select \");\n        i0.ɵɵelementStart(7, \"span\");\n        i0.ɵɵtext(8, \"Target\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, SelectTargetComponent_button_9_Template, 2, 0, \"button\", 5);\n        i0.ɵɵtemplate(10, SelectTargetComponent_p_10_Template, 2, 0, \"p\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, SelectTargetComponent_div_11_Template, 2, 1, \"div\", 7);\n        i0.ɵɵtemplate(12, SelectTargetComponent_ul_12_Template, 2, 1, \"ul\", 8);\n        i0.ɵɵelementStart(13, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function SelectTargetComponent_Template_button_click_13_listener() {\n          return ctx.onGoToEditDrill();\n        });\n        i0.ɵɵtext(14, \" Continue\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"ios\", ctx.isiOS);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isScanning);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isScanning);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isScanning && ctx.myTargets.length > 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", false);\n      }\n    },\n    directives: [i15.NgIf, i15.NgForOf, i15.NgClass],\n    styles: [\"section.target-selection[_ngcontent-%COMP%]{width:100%;height:100%;display:flex;flex-direction:column;box-sizing:border-box;overflow-y:auto;background:radial-gradient(71.47% 224.04% at 19.09% 13.6%,#404658 0%,#161820 100%);align-items:center;justify-content:space-between;padding-left:env(safe-area-inset-left);padding-right:env(safe-area-inset-right);padding-bottom:env(safe-area-inset-bottom);padding-top:env(safe-area-inset-top)}section.target-selection[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;width:100%}section.target-selection[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]   p.title[_ngcontent-%COMP%]{display:flex;align-items:center;font-size:27px;color:#fff;margin:0}section.target-selection[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]   p.title[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#fce651;padding-left:.3em}section.target-selection[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]   button.connect[_ngcontent-%COMP%]{border:1px solid #FCE651;box-sizing:border-box;border-radius:3px;background-color:transparent;color:#fce651;height:50px;width:100%;font-size:16px;line-height:19px;text-align:center;text-transform:uppercase;margin-top:30px}section.target-selection[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]   p.explanation-text[_ngcontent-%COMP%]{font-weight:300;font-size:18px;line-height:21px;text-align:center;color:#fff;margin:0;word-break:break-word;width:343px}section.target-selection[_ngcontent-%COMP%]   ul.target-list[_ngcontent-%COMP%]{margin:0;padding:0;list-style:none;width:100%;height:60vh;overflow-y:auto}section.target-selection[_ngcontent-%COMP%]   ul.target-list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{height:45px;background:rgba(255,255,255,.27);border-radius:6px;width:100%;margin-bottom:10px;font-weight:400;font-size:20px;line-height:24px;letter-spacing:.15px;color:#ffffffde;box-sizing:border-box;padding:11px 23px;transition:all .3s;color:#fce651}section.target-selection[_ngcontent-%COMP%]   ul.target-list[_ngcontent-%COMP%]   li.selected[_ngcontent-%COMP%]{background:#FFFFFF;color:#000}section.target-selection[_ngcontent-%COMP%]   button.continue[_ngcontent-%COMP%]{box-sizing:border-box;border-radius:3px;background-color:#fce651;color:#000;height:50px;width:100%;font-size:16px;line-height:19px;text-align:center;text-transform:uppercase;margin-bottom:20px}section.target-selection[_ngcontent-%COMP%]   .scanAnimation[_ngcontent-%COMP%]{animation:pulse-red 2s infinite}@keyframes pulse-red{0%{transform:scale(.95);box-shadow:0 0 #54b8deb3;border-radius:100%}70%{transform:scale(1.5);box-shadow:0 0 0 10px #54b8de00;border-radius:100%}to{transform:scale(1);box-shadow:0 0 #54b8de00;border-radius:100%}}div.back-container[_ngcontent-%COMP%]{position:absolute;top:16px;left:16px;display:flex;align-items:center}div.back-container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;font-weight:bold;font-size:22px;line-height:26px;color:#fff}div.back-container[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{padding-right:7px;width:35px}.ios[_ngcontent-%COMP%]{top:50px!important}\"]\n  });\n  return SelectTargetComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}