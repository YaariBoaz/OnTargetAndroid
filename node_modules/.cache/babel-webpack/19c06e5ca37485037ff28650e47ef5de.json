{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nvar BackgroundMode = /** @class */function (_super) {\n  __extends(BackgroundMode, _super);\n  function BackgroundMode() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  BackgroundMode.prototype.enable = function () {\n    return cordova(this, \"enable\", {\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.disable = function () {\n    return cordova(this, \"disable\", {\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.setEnabled = function (enable) {\n    return cordova(this, \"setEnabled\", {\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.fireEvent = function (event) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    return cordova(this, \"fireEvent\", {\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.isEnabled = function () {\n    return cordova(this, \"isEnabled\", {\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.isActive = function () {\n    return cordova(this, \"isActive\", {\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.setDefaults = function (overrides) {\n    return cordova(this, \"setDefaults\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n  BackgroundMode.prototype.configure = function (options) {\n    return cordova(this, \"configure\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.on = function (event) {\n    return cordova(this, \"on\", {\n      \"observable\": true,\n      \"clearFunction\": \"un\",\n      \"clearWithArgs\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.un = function (event, callback) {\n    return cordova(this, \"un\", {}, arguments);\n  };\n  BackgroundMode.prototype.moveToBackground = function () {\n    return cordova(this, \"moveToBackground\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.disableWebViewOptimizations = function () {\n    return cordova(this, \"disableWebViewOptimizations\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.moveToForeground = function () {\n    return cordova(this, \"moveToForeground\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.overrideBackButton = function () {\n    return cordova(this, \"overrideBackButton\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.excludeFromTaskList = function () {\n    return cordova(this, \"excludeFromTaskList\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.isScreenOff = function (fn) {\n    return cordova(this, \"isScreenOff\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n  BackgroundMode.prototype.wakeUp = function () {\n    return cordova(this, \"wakeUp\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.unlock = function () {\n    return cordova(this, \"unlock\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.prototype.disableBatteryOptimizations = function () {\n    return cordova(this, \"disableBatteryOptimizations\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n  BackgroundMode.pluginName = \"BackgroundMode\";\n  BackgroundMode.plugin = \"cordova-plugin-background-mode\";\n  BackgroundMode.pluginRef = \"cordova.plugins.backgroundMode\";\n  BackgroundMode.repo = \"https://github.com/katzer/cordova-plugin-background-mode\";\n  BackgroundMode.platforms = [\"AmazonFire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\"];\n  BackgroundMode.ɵfac = /*@__PURE__*/function () {\n    var ɵBackgroundMode_BaseFactory;\n    return function BackgroundMode_Factory(t) {\n      return (ɵBackgroundMode_BaseFactory || (ɵBackgroundMode_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BackgroundMode)))(t || BackgroundMode);\n    };\n  }();\n  BackgroundMode.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BackgroundMode,\n    factory: function (t) {\n      return BackgroundMode.ɵfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return BackgroundMode;\n}(AwesomeCordovaNativePlugin);\nexport { BackgroundMode };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}