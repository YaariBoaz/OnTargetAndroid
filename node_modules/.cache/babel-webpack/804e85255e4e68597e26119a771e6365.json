{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { __extends } from \"tslib\";\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PieSeries3DDataItem = /** @class */function (_super) {\n  __extends(PieSeries3DDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PieSeries3DDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PieSeries3DDataItem\";\n    _this.values.depthValue = {};\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(PieSeries3DDataItem.prototype, \"depthValue\", {\n    /**\r\n     * @return Depth\r\n     */\n    get: function () {\n      return this.values[\"depthValue\"].value;\n    },\n    /**\r\n     * Slice depth (height).\r\n     *\r\n     * @param value  Depth\r\n     */\n    set: function (value) {\n      this.setValue(\"depthValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PieSeries3DDataItem;\n}(PieSeriesDataItem);\nexport { PieSeries3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\nvar PieSeries3D = /** @class */function (_super) {\n  __extends(PieSeries3D, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PieSeries3D() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PieSeries3D\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  PieSeries3D.prototype.createDataItem = function () {\n    return new PieSeries3DDataItem();\n  };\n  /**\r\n   * creates slice\r\n   */\n  PieSeries3D.prototype.createSlice = function () {\n    return new Slice3D();\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  PieSeries3D.prototype.validateDataElement = function (dataItem) {\n    var slice = dataItem.slice;\n    var depth = this.depth;\n    if (!$type.isNumber(depth)) {\n      depth = this.chart.depth;\n    }\n    var depthPercent = dataItem.values.depthValue.percent;\n    if (!$type.isNumber(depthPercent)) {\n      depthPercent = 100;\n    }\n    slice.depth = depthPercent * depth / 100;\n    var angle = this.angle;\n    if (!$type.isNumber(angle)) {\n      angle = this.chart.angle;\n    }\n    slice.angle = angle;\n    _super.prototype.validateDataElement.call(this, dataItem);\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PieSeries3D.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    for (var i = this._workingStartIndex; i < this._workingEndIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      var slice = dataItem.slice;\n      var startAngle = slice.startAngle;\n      // find quarter\n      //q0 || q1\n      if (startAngle >= -90 && startAngle < 90) {\n        slice.toFront();\n      }\n      //q2 || q3\n      else if (startAngle >= 90) {\n        slice.toBack();\n      }\n    }\n  };\n  Object.defineProperty(PieSeries3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n    /**\r\n     * Depth (height) of the pie slice in pixels.\r\n     *\r\n     * @param value  Depth (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"depth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieSeries3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n    /**\r\n     * Angle of the view point of the 3D pie. (0-360)\r\n     *\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions series bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet  Bullet\r\n   */\n  PieSeries3D.prototype.positionBullet = function (bullet) {\n    _super.prototype.positionBullet.call(this, bullet);\n    var dataItem = bullet.dataItem;\n    var slice = dataItem.slice;\n    bullet.y = bullet.pixelY - slice.depth;\n  };\n  return PieSeries3D;\n}(PieSeries);\nexport { PieSeries3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\n//# sourceMappingURL=PieSeries3D.js.map","map":null,"metadata":{},"sourceType":"module"}