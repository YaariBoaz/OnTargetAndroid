{"ast":null,"code":"import _asyncToGenerator from \"/Applications/OnTarget/OnTarget/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-eea9a7a9.js';\nimport { l as assert } from './helpers-dd7e4b7b.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-931440b1.js';\nimport { a as attachComponent } from './framework-delegate-4392cd63.js';\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  init(container) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.state = VIEW_STATE_ATTACHED;\n      if (!_this.element) {\n        const component = _this.component;\n        _this.element = yield attachComponent(_this.delegate, container, component, ['ion-page', 'ion-page-invisible'], _this.params);\n      }\n    })();\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      } else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  const currentParams = view.params;\n  if (currentParams === params) {\n    return true;\n  }\n  if (!currentParams && !params) {\n    return true;\n  }\n  if (!currentParams || !params) {\n    return false;\n  }\n  const keysA = Object.keys(currentParams);\n  const keysB = Object.keys(params);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  // Test for A's keys different from B.\n  for (const key of keysA) {\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = pages => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  componentDidLoad() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.rootChanged();\n      _this2.gesture = (yield import('./swipe-back-fae97365.js')).createSwipeBackGesture(_this2.el, _this2.canStart.bind(_this2), _this2.onStart.bind(_this2), _this2.onMove.bind(_this2), _this2.onEnd.bind(_this2));\n      _this2.swipeGestureChanged();\n    })();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    // release swipe back gesture and transition\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{\n        component,\n        componentProps\n      }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{\n        component,\n        componentProps\n      }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts\n    }, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    } else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(tiConfig, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    }\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /** @internal */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => resolve = r);\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => mark = r);\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: function () {\n            var _ref = _asyncToGenerator(function* () {\n              mark();\n              yield finish;\n            });\n            return function markVisible() {\n              return _ref.apply(this, arguments);\n            };\n          }()\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    } else {\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animationBuilder: animation\n        }));\n      } else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n          animationBuilder: animation\n        }));\n      } else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animated: true,\n          animationBuilder: animation\n        }));\n      }\n    }\n    return promise;\n  }\n  /** @internal */\n  getRouteId() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const active = _this3.getActiveSync();\n      return active ? {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      } : undefined;\n    })();\n  }\n  /**\n   * Get the active view.\n   */\n  getActive() {\n    return Promise.resolve(this.getActiveSync());\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  getByIndex(index) {\n    return Promise.resolve(this.views[index]);\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  canGoBack(view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  getPrevious(view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n  queueTrns(ti, done) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n        return Promise.resolve(false);\n      }\n      const promise = new Promise((resolve, reject) => {\n        ti.resolve = resolve;\n        ti.reject = reject;\n      });\n      ti.done = done;\n      /**\n       * If using router, check to see if navigation hooks\n       * will allow us to perform this transition. This\n       * is required in order for hooks to work with\n       * the ion-back-button or swipe to go back.\n       */\n      if (ti.opts && ti.opts.updateURL !== false && _this4.useRouter) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n          const canTransition = yield router.canTransition();\n          if (canTransition === false) {\n            return Promise.resolve(false);\n          } else if (typeof canTransition === 'string') {\n            router.push(canTransition, ti.opts.direction || 'back');\n            return Promise.resolve(false);\n          }\n        }\n      }\n      // Normalize empty\n      if (ti.insertViews && ti.insertViews.length === 0) {\n        ti.insertViews = undefined;\n      }\n      // Enqueue transition instruction\n      _this4.transInstr.push(ti);\n      // if there isn't a transition already happening\n      // then this will kick off this transition\n      _this4.nextTrns();\n      return promise;\n    })();\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    } else {\n      ti.resolve(false);\n    }\n  }\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now\n    // get the next instruction\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  runTransition(ti) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // set that this nav is actively transitioning\n        _this5.ionNavWillChange.emit();\n        _this5.isTransitioning = true;\n        _this5.prepareTI(ti);\n        const leavingView = _this5.getActiveSync();\n        const enteringView = _this5.getEnteringView(ti, leavingView);\n        if (!leavingView && !enteringView) {\n          throw new Error('no views in the stack to be removed');\n        }\n        if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n          yield enteringView.init(_this5.el);\n        }\n        _this5.postViewInit(enteringView, leavingView, ti);\n        // Needs transition?\n        const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n        if (requiresTransition && ti.opts && leavingView) {\n          const isBackDirection = ti.opts.direction === 'back';\n          /**\n           * If heading back, use the entering page's animation\n           * unless otherwise specified by the developer.\n           */\n          if (isBackDirection) {\n            ti.opts.animationBuilder = ti.opts.animationBuilder || enteringView && enteringView.animationBuilder;\n          }\n          leavingView.animationBuilder = ti.opts.animationBuilder;\n        }\n        const result = requiresTransition ? yield _this5.transition(enteringView, leavingView, ti) : {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          hasCompleted: true,\n          requiresTransition: false\n        };\n        _this5.success(result, ti);\n        _this5.ionNavDidChange.emit();\n      } catch (rejectReason) {\n        _this5.failed(rejectReason, ti);\n      }\n      _this5.isTransitioning = false;\n      _this5.nextTrns();\n    })();\n  }\n  prepareTI(ti) {\n    const viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  getEnteringView(ti, leavingView) {\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  postViewInit(enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    const opts = ti.opts;\n    const insertViews = ti.insertViews;\n    const removeStart = ti.removeStart;\n    const removeCount = ti.removeCount;\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = 0; i < removeCount; i++) {\n        const view = this.views[i + removeStart];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      opts.direction = opts.direction || 'back';\n    }\n    const finalBalance = this.views.length + (insertViews !== undefined ? insertViews.length : 0) - (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n    if (finalBalance === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  transition(enteringView, leavingView, ti) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // we should animate (duration > 0) if the pushed page is not the first one (startup)\n      // or if it is a portal (modal, actionsheet, etc.)\n      const opts = ti.opts;\n      const progressCallback = opts.progressAnimation ? ani => _this6.sbAni = ani : undefined;\n      const mode = getIonMode(_this6);\n      const enteringEl = enteringView.element;\n      const leavingEl = leavingView && leavingView.element;\n      const animationOpts = Object.assign(Object.assign({\n        mode,\n        showGoBack: _this6.canGoBackSync(enteringView),\n        baseEl: _this6.el,\n        progressCallback,\n        animated: _this6.animated && config.getBoolean('animated', true),\n        enteringEl,\n        leavingEl\n      }, opts), {\n        animationBuilder: opts.animationBuilder || _this6.animation || config.get('navAnimation')\n      });\n      const {\n        hasCompleted\n      } = yield transition(animationOpts);\n      return _this6.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    })();\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    } else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      // insert the entering view into the correct index in the stack\n      views.splice(index, 0, view);\n    }\n  }\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        } else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n  }\n  onStart() {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, {\n        oneTimeCallback: true\n      });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      } else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"root\": [\"rootChanged\"]\n    };\n  }\n};\nNav.style = navCss;\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'back') {\n      return nav.pop({\n        skipIfBusy: true,\n        animationBuilder: routerAnimation\n      });\n    }\n  }\n  return Promise.resolve(false);\n};\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return h(Host, {\n      onClick: this.onClick\n    });\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nexport { Nav as ion_nav, NavLink as ion_nav_link };","map":{"version":3,"names":["r","registerInstance","e","createEvent","h","i","getElement","H","Host","b","getIonMode","c","config","g","getTimeGivenProgression","l","assert","lifecycle","t","transition","s","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","constructor","component","params","state","init","container","element","delegate","_destroy","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","Nav","hostRef","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","swipeGestureChanged","gesture","enable","swipeGesture","rootChanged","root","setRoot","rootParams","componentWillLoad","document","querySelector","el","closest","mode","getBoolean","emit","componentDidLoad","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","disconnectedCallback","destroy","push","opts","done","queueTrns","insertStart","insertViews","insert","insertIndex","insertPages","insertComponents","pop","removeStart","removeCount","popTo","indexOrViewCtrl","tiConfig","removeView","popToRoot","removeIndex","startIndex","setPages","setRouteId","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","assign","animationBuilder","getRouteId","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","ti","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","viewsLength","viewControllers","removeEnd","destroyQueue","finalBalance","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","render","watchers","style","navLink","routerDirection","routerAnimation","NavLink","onClick","ion_nav","ion_nav_link"],"sources":["/Applications/OnTarget/OnTarget/node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"sourcesContent":["import { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-eea9a7a9.js';\nimport { l as assert } from './helpers-dd7e4b7b.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-931440b1.js';\nimport { a as attachComponent } from './framework-delegate-4392cd63.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  const currentParams = view.params;\n  if (currentParams === params) {\n    return true;\n  }\n  if (!currentParams && !params) {\n    return true;\n  }\n  if (!currentParams || !params) {\n    return false;\n  }\n  const keysA = Object.keys(currentParams);\n  const keysB = Object.keys(params);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  // Test for A's keys different from B.\n  for (const key of keysA) {\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter =\n      !!document.querySelector('ion-router') &&\n        !this.el.closest('[no-router]');\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back-fae97365.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    // release swipe back gesture and transition\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts\n    }, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(tiConfig, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    }\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /** @internal */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /** @internal */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    return active\n      ? {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      }\n      : undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  getActive() {\n    return Promise.resolve(this.getActiveSync());\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  getByIndex(index) {\n    return Promise.resolve(this.views[index]);\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  canGoBack(view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  getPrevious(view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n  async queueTrns(ti, done) {\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n      return Promise.resolve(false);\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return Promise.resolve(false);\n        }\n        else if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return Promise.resolve(false);\n        }\n      }\n    }\n    // Normalize empty\n    if (ti.insertViews && ti.insertViews.length === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now\n    // get the next instruction\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n        enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      const result = requiresTransition\n        ? await this.transition(enteringView, leavingView, ti)\n        : {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    const viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition =\n        ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  getEnteringView(ti, leavingView) {\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  postViewInit(enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    const opts = ti.opts;\n    const insertViews = ti.insertViews;\n    const removeStart = ti.removeStart;\n    const removeCount = ti.removeCount;\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = 0; i < removeCount; i++) {\n        const view = this.views[i + removeStart];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      opts.direction = opts.direction || 'back';\n    }\n    const finalBalance = this.views.length +\n      (insertViews !== undefined ? insertViews.length : 0) -\n      (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n    if (finalBalance === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation\n      ? (ani) => this.sbAni = ani\n      : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      // insert the entering view into the correct index in the stack\n      views.splice(index, 0, view);\n    }\n  }\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return (h(\"slot\", null));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'back') {\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n    }\n  }\n  return Promise.resolve(false);\n};\n\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return (h(Host, { onClick: this.onClick }));\n  }\n  get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}