{"ast":null,"code":"import { ShootingService } from '../services/shooting.service';\nimport { DrillModelHitNoHit } from '../models/DrillModel';\nimport { StorageService } from '../services/storage.service';\nimport { UserService } from '../services/user.service';\nimport { ApiService } from '../services/api.service';\nimport { BleService } from '../services/ble.service';\nimport { BehaviorSubject, interval, Subscription } from 'rxjs';\nimport * as moment from 'moment';\nimport { GatewayService } from '../services/gateway.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/shooting.service\";\nimport * as i2 from \"../services/storage.service\";\nimport * as i3 from \"../services/user.service\";\nimport * as i4 from \"../services/gateway.service\";\nimport * as i5 from \"../services/ble.service\";\nimport * as i6 from \"../services/api.service\";\nexport let HitNohitService = /*#__PURE__*/(() => {\n  class HitNohitService {\n    constructor(shootingService, storageService, userService, gateway, bleService, apiService) {\n      this.shootingService = shootingService;\n      this.storageService = storageService;\n      this.userService = userService;\n      this.gateway = gateway;\n      this.bleService = bleService;\n      this.apiService = apiService;\n      this.resetDrillSubject = new BehaviorSubject(false);\n      this.drillFinished = false;\n      this.DEFUALT_PAGEDATA = {\n        distanceFromCenter: 0,\n        splitTime: '',\n        rateOfFire: 0,\n        counter: 0,\n        points: 0,\n        lastShotTime: null,\n        totalTime: {}\n      };\n      this.pageData = {\n        distanceFromCenter: 0,\n        splitTime: '',\n        rateOfFire: 0,\n        counter: 0,\n        points: 0,\n        lastShotTime: null,\n        totalTime: {}\n      };\n      this.stats = [];\n      this.DEFAULT_SUMMARY_OBJECT = {\n        points: 0,\n        distanceFromCenter: 0,\n        split: 0,\n        totalTime: 0,\n        counter: 0\n      };\n      this.summaryObject = {\n        points: 0,\n        distanceFromCenter: 0,\n        split: '0',\n        totalTime: '0',\n        counter: 0\n      };\n      this.hitArrived = new BehaviorSubject(null);\n      this.didFirstStamArrive = false;\n      this.drillIsFinished = false;\n      this.splitDate = null;\n      this.overallDate = null;\n      this.doubleSplits = [];\n      this.finalSplits = [];\n      this.drillFinishedNotify = new BehaviorSubject(null);\n      this.DEFAULT_PAGE_DATA = {\n        distanceFromCenter: 0,\n        splitTime: '',\n        rateOfFire: 0,\n        counter: 0,\n        points: 0,\n        lastShotTime: null,\n        totalTime: '00:00:00'\n      };\n      this.startListening();\n    }\n    setDrill(drill) {\n      this.drill = drill;\n    }\n    startListening() {\n      this.bleService.notifyShotArrived.subscribe(num => {\n        if (this.didFirstStamArrive) {\n          this.shotArrived(num);\n        } else {\n          this.didFirstStamArrive = true;\n        }\n      });\n      this.gateway.notifyHitNoHit.subscribe(data => {\n        if (!this.drillIsFinished) {\n          this.updateStats(data);\n        }\n      });\n    }\n    shotArrived(num) {\n      if (!this.drillIsFinished) {\n        return this.updateStats(num);\n      }\n    }\n    initStats() {\n      this.stats = [];\n      this.drillIsFinished = false;\n      this.pageData = Object.assign(this.pageData, this.DEFAULT_PAGE_DATA);\n      this.summaryObject = Object.assign(this.summaryObject, this.DEFAULT_SUMMARY_OBJECT);\n      this.pageData.counter = 0;\n      this.bleService.resetShots();\n      this.startTimer();\n    }\n    startTimer() {\n      // tslint:disable-next-line:no-shadowed-variable max-line-length\n      const now = new Date();\n      this.firstTime = now;\n      this.lastTime = now;\n    }\n    updateStats(num) {\n      this.pageData.counter++;\n      // tslint:disable-next-line:max-line-length\n      const now = new Date();\n      const split = moment.utc(moment(now, 'DD/MM/YYYY HH:mm:ss').diff(moment(this.lastTime, 'DD/MM/YYYY HH:mm:ss'))).format('mm:ss.SS');\n      const total = moment.utc(moment(now, 'DD/MM/YYYY HH:mm:ss').diff(moment(this.firstTime, 'DD/MM/YYYY HH:mm:ss'))).format('mm:ss.SS');\n      this.finalSplits.push();\n      // tslint:disable-next-line:max-line-length\n      this.lastTime = new Date();\n      this.pageData.totalTime = total;\n      this.pageData.splitTime = split;\n      this.pageData.points = 2;\n      this.stats.push({\n        pageData: Object.assign({}, this.pageData),\n        interval: this.pageData.totalTime\n      });\n      let points = 0;\n      let distanceFromCenter = 0;\n      // tslint:disable-next-line:prefer-for-of\n      for (let i = 0; i < this.stats.length; i++) {\n        points += this.stats[i].pageData.points;\n        distanceFromCenter += this.stats[i].pageData.distanceFromCenter;\n      }\n      this.summaryObject = {\n        // @ts-ignore\n        points,\n        distanceFromCenter,\n        split: this.getSummarySplit(this.stats, this.stats.length),\n        totalTime: total,\n        counter: this.stats[this.stats.length - 1].pageData.counter\n      };\n      let isFinish = false;\n      if (this.pageData.counter >= this.shootingService.numberOfBullersPerDrill) {\n        this.finishDrill();\n        isFinish = true;\n      }\n      this.notifyHitArrived(isFinish, num);\n    }\n    getShotItems() {\n      const shotItems = new Array();\n      this.stats.forEach(stat => {\n        shotItems.push({\n          disFromCenter: stat.pageData.distanceFromCenter.toString(),\n          hitHostage: false,\n          isHeader: false,\n          isOdd: false,\n          orbital: '0',\n          score: this.pageData.points.toString(),\n          shotNumber: '0',\n          time: stat.pageData.totalTime,\n          timeSplit: stat.pageData.splitTime\n        });\n      });\n      return shotItems;\n    }\n    updateHistory() {\n      this.drill = this.shootingService.selectedDrill;\n      let updatedData = this.storageService.getItem('homeData');\n      if (!updatedData) {\n        updatedData = {};\n      }\n      if (!updatedData.trainingHistory) {\n        updatedData.trainingHistory = [];\n      }\n      const splits = [];\n      this.stats.forEach(stat => {\n        splits.push(stat.pageData.splitTime);\n      });\n      const drill = {\n        date: new Date().toJSON(),\n        day: new Date().toLocaleString('en-us', {\n          weekday: 'long'\n        }),\n        hits: this.stats.length,\n        points: this.summaryObject.points,\n        range: this.drill.range,\n        numericSplitAvg: this.timeStringToSeconds(this.summaryObject.split),\n        totalShots: this.drill.numOfBullets,\n        userId: this.userService.getUserId(),\n        splitItems: splits,\n        shotItems: this.getShotItems()\n      };\n      updatedData.trainingHistory.push({\n        drillDate: new Date().toString(),\n        day: new Date().toLocaleString('en-us', {\n          weekday: 'long'\n        }),\n        drillType: this.drill.drillType,\n        totalShots: this.drill.numOfBullets,\n        range: this.drill.range,\n        timeLimit: null,\n        splitAvg: this.pageData.splitTime,\n        points: this.summaryObject.points,\n        avgDistFromCenter: this.pageData.distanceFromCenter,\n        hits: this.stats,\n        stata: this.stats,\n        summaryObject: this.summaryObject,\n        recommendation: null\n      });\n      this.storageService.setItem('homeData', updatedData);\n      this.apiService.syncDataHitNoHit(drill).subscribe(data => {\n        this.apiService.getDashboardData(this.userService.getUserId()).subscribe(data1 => {\n          this.storageService.setItem('homeData', data);\n        });\n      });\n    }\n    timeStringToSeconds(timeString) {\n      const timeArray = timeString.split(':');\n      let hour = 0;\n      let minutes = 0;\n      const seconds = 0;\n      if (timeArray[0] !== '00') {\n        let time = 0;\n        if (timeArray[0].charAt(0) !== '0') {\n          // tslint:disable-next-line:radix\n          time = parseInt(timeArray[0]);\n        } else {\n          // tslint:disable-next-line:radix\n          time = parseInt(timeArray[0].charAt(1));\n        }\n        hour = time * 3600;\n      }\n      if (timeArray[1] !== '00') {\n        let time = 0;\n        if (timeArray[1].charAt(0) !== '0') {\n          // tslint:disable-next-line:radix\n          time = parseInt(timeArray[1]);\n        } else {\n          // tslint:disable-next-line:radix\n          time = parseInt(timeArray[1].charAt(1));\n        }\n        minutes = time * 60;\n      }\n      return hour + minutes + seconds;\n    }\n    resetDrill() {}\n    getTotalAndSplitTimes() {\n      const obj = this.doubleSplits.find(o => o.str === this.currentSplitTime);\n      this.finalSplits.push(obj.mili);\n      return {\n        splitTime: this.currentSplitTime,\n        totalTime: this.currenOverTime\n      };\n    }\n    createFirstShotData() {\n      this.pageData.totalTime = '00:00';\n      this.pageData.lastShotTime = new Date();\n      this.pageData.splitTime = '00:00';\n      const overAllTime = '00:00';\n      this.stats.push({\n        pageData: Object.assign({}, this.pageData),\n        interval: overAllTime\n      });\n      console.log('Inside createFirstShotData pageData is: ', this.pageData);\n    }\n    finishDrill() {\n      this.drillIsFinished = true;\n    }\n    handleSummaryData() {\n      let points = 0;\n      let distanceFromCenter = 0;\n      let split = 0;\n      this.stats.forEach(stat => {\n        points += 2;\n        distanceFromCenter += stat.pageData.distanceFromCenter;\n        const timeArray = stat.pageData.splitTime.split(':');\n        return timeArray[0] + ':' + timeArray[1];\n        const arr = stat.pageData.splitTime.split(':');\n        // tslint:disable-next-line:radix\n        const leftSide = parseInt(arr[0]);\n        // @ts-ignore\n        const splitSum = leftSide + parseFloat(String(arr[1] * 0.01));\n        split += splitSum;\n      });\n      const statsLength = this.stats.length;\n      let finalSplit = split / statsLength;\n      // @ts-ignore\n      finalSplit = parseFloat(finalSplit).toFixed(2);\n      // @ts-ignore\n      finalSplit = '0' + finalSplit;\n      this.summaryObject = {\n        points,\n        distanceFromCenter: distanceFromCenter / statsLength,\n        split: this.getSummarySplit(this.stats, this.stats.length),\n        totalTime: this.stats[statsLength - 1].interval,\n        counter: this.stats[statsLength - 1].pageData.counter\n      };\n    }\n    getSummarySplit(stats, statsLength) {\n      if (stats) {\n        let totalSeconds = 0;\n        stats.forEach(stat => {\n          const arr = stat.pageData.splitTime.split(':');\n          const arr2 = arr[1].split('.');\n          // tslint:disable-next-line:radix\n          const minutes = parseInt(arr[0]) / 60;\n          // tslint:disable-next-line:radix\n          const seconds = parseInt(arr2[0]);\n          // tslint:disable-next-line:radix\n          const mili = parseInt(arr2[1]) / 1000;\n          totalSeconds += minutes + seconds + mili;\n        });\n        const date = new Date(0);\n        totalSeconds = totalSeconds / statsLength;\n        date.setSeconds(totalSeconds); // specify value for SECONDS here\n        let milisec = '0';\n        if (totalSeconds % 1 !== 0) {\n          milisec = totalSeconds.toString().split('.')[1];\n          if (milisec.length >= 2) {\n            milisec = milisec[1] + milisec[2];\n            if (parseInt(milisec) > 60) {\n              totalSeconds += 1;\n              milisec = milisec[1];\n            }\n          }\n        }\n        const timeString = date.toISOString().substr(11, 8);\n        const finalArray = timeString.split(':');\n        return finalArray[1] + ':' + finalArray[2] + '.' + milisec;\n        debugger;\n      }\n      return null;\n    }\n    notifyHitArrived(isFinish, num) {\n      this.hitArrived.next({\n        hitNumber: num,\n        statsData: {\n          stats: this.stats,\n          pageData: this.pageData,\n          isFinish,\n          summaryObject: this.summaryObject\n        }\n      });\n    }\n    getElapsedTime(entry) {\n      const duration = new Date().getTime() - entry.created.getTime();\n      // tslint:disable-next-line:radix\n      const milliseconds = parseInt(String(duration % 1000 / 100));\n      let seconds = Math.floor(duration / 1000 % 60);\n      let minutes = Math.floor(duration / (1000 * 60) % 60);\n      let hours = Math.floor(duration / (1000 * 60 * 60) % 24);\n      hours = hours < 10 ? '0' + hours : hours;\n      minutes = minutes < 10 ? '0' + minutes : minutes;\n      seconds = seconds < 10 ? '0' + seconds : seconds;\n      this.doubleSplits.push({\n        mili: duration,\n        str: minutes + ':' + seconds + '.' + milliseconds\n      });\n      return minutes + ':' + seconds + '.' + milliseconds;\n    }\n    startSplitInterval() {\n      this.splitSubscription = interval(100).subscribe(() => {\n        const timespan = this.getElapsedTime(this.splitDate);\n        this.currentSplitTime = timespan;\n      });\n    }\n    startOverallInterval() {\n      this.overallSubscription = interval(1000).subscribe(() => {\n        const timespan = this.getElapsedTime(this.overallDate);\n        this.currenOverTime = timespan;\n      });\n    }\n  }\n  HitNohitService.ɵfac = function HitNohitService_Factory(t) {\n    return new (t || HitNohitService)(i0.ɵɵinject(i1.ShootingService), i0.ɵɵinject(i2.StorageService), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i4.GatewayService), i0.ɵɵinject(i5.BleService), i0.ɵɵinject(i6.ApiService));\n  };\n  HitNohitService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HitNohitService,\n    factory: HitNohitService.ɵfac,\n    providedIn: 'root'\n  });\n  return HitNohitService;\n})();\nexport class TimeSpan {\n  constructor(minuts, seconds, milliseconds) {\n    this.minutes = minuts;\n    this.seconds = seconds;\n    this.milliseconds = milliseconds;\n  }\n  toString() {\n    return this.minutes + ':' + this.seconds;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}