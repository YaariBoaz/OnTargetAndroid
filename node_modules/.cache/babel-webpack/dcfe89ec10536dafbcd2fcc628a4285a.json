{"ast":null,"code":"/**\r\n * Resize button module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Button } from \"./Button\";\nimport { Sprite } from \"../Sprite\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a draggable resize/grip button.\r\n *\r\n * @see {@link IResizeButtonEvents} for a list of available events\r\n * @see {@link IResizeButtonAdapters} for a list of available Adapters\r\n */\nvar ResizeButton = /** @class */function (_super) {\n  __extends(ResizeButton, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ResizeButton() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"ResizeButton\";\n    // Set defaults\n    _this.orientation = \"horizontal\";\n    _this.layout = \"absolute\";\n    _this.horizontalCenter = \"middle\";\n    _this.verticalCenter = \"middle\";\n    _this.draggable = true;\n    _this.padding(8, 8, 8, 8);\n    _this.background.cornerRadius(20, 20, 20, 20);\n    // Create an icon\n    var icon = new Sprite();\n    icon.element = _this.paper.add(\"path\");\n    var path = $path.moveTo({\n      x: -2,\n      y: -6\n    });\n    path += $path.lineTo({\n      x: -2,\n      y: 6\n    });\n    path += $path.moveTo({\n      x: 2,\n      y: -6\n    });\n    path += $path.lineTo({\n      x: 2,\n      y: 6\n    });\n    icon.path = path;\n    icon.pixelPerfect = true;\n    icon.padding(0, 4, 0, 4);\n    icon.stroke = new InterfaceColorSet().getFor(\"alternativeText\");\n    icon.strokeOpacity = 0.7;\n    //icon.align = \"center\";\n    //icon.valign = \"middle\";\n    _this.icon = icon;\n    _this.label.dispose();\n    _this.label = undefined;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(ResizeButton.prototype, \"orientation\", {\n    /**\r\n     * Use for setting of direction (orientation) of the resize button.\r\n     *\r\n     * Available options: \"horizontal\", \"vertical\".\r\n     *\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      var icon = this.icon;\n      if (icon) {\n        if (value == \"horizontal\") {\n          icon.rotation = 0;\n        } else {\n          icon.rotation = -90;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ResizeButton;\n}(Button);\nexport { ResizeButton };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ResizeButton\"] = ResizeButton;\n//# sourceMappingURL=ResizeButton.js.map","map":null,"metadata":{},"sourceType":"module"}