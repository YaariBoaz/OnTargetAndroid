{"ast":null,"code":"import { __assign, __decorate } from \"tslib\";\nimport { Directive, Injectable, Input, NgModule } from '@angular/core';\nimport { NavigationEnd, NavigationStart } from '@angular/router';\nimport { getCurrentHub } from '@sentry/browser';\nimport { getGlobalObject, logger, stripUrlQueryAndFragment, timestampWithMs } from '@sentry/utils';\nimport { Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { ANGULAR_INIT_OP, ANGULAR_OP, ANGULAR_ROUTING_OP } from './constants';\nimport { runOutsideAngular } from './zone';\nvar instrumentationInitialized;\nvar stashedStartTransaction;\nvar stashedStartTransactionOnLocationChange;\nvar global = getGlobalObject();\n/**\n * Creates routing instrumentation for Angular Router.\n */\nexport function routingInstrumentation(customStartTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {\n  if (startTransactionOnPageLoad === void 0) {\n    startTransactionOnPageLoad = true;\n  }\n  if (startTransactionOnLocationChange === void 0) {\n    startTransactionOnLocationChange = true;\n  }\n  instrumentationInitialized = true;\n  stashedStartTransaction = customStartTransaction;\n  stashedStartTransactionOnLocationChange = startTransactionOnLocationChange;\n  if (startTransactionOnPageLoad && global && global.location) {\n    customStartTransaction({\n      name: global.location.pathname,\n      op: 'pageload'\n    });\n  }\n}\nexport var instrumentAngularRouting = routingInstrumentation;\n/**\n * Grabs active transaction off scope\n */\nexport function getActiveTransaction() {\n  var currentHub = getCurrentHub();\n  if (currentHub) {\n    var scope = currentHub.getScope();\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n  return undefined;\n}\n/**\n * Angular's Service responsible for hooking into Angular Router and tracking current navigation process.\n * Creates a new transaction for every route change and measures a duration of routing process.\n */\nvar TraceService = /** @class */function () {\n  function TraceService(_router) {\n    var _this = this;\n    this._router = _router;\n    this.navStart$ = this._router.events.pipe(filter(function (event) {\n      return event instanceof NavigationStart;\n    }), tap(function (event) {\n      if (!instrumentationInitialized) {\n        logger.error('Angular integration has tracing enabled, but Tracing integration is not configured');\n        return;\n      }\n      var navigationEvent = event;\n      var strippedUrl = stripUrlQueryAndFragment(navigationEvent.url);\n      var activeTransaction = getActiveTransaction();\n      if (!activeTransaction && stashedStartTransactionOnLocationChange) {\n        activeTransaction = stashedStartTransaction({\n          name: strippedUrl,\n          op: 'navigation'\n        });\n      }\n      if (activeTransaction) {\n        if (_this._routingSpan) {\n          _this._routingSpan.finish();\n        }\n        _this._routingSpan = activeTransaction.startChild({\n          description: \"\" + navigationEvent.url,\n          op: ANGULAR_ROUTING_OP,\n          tags: __assign({\n            'routing.instrumentation': '@sentry/angular',\n            url: strippedUrl\n          }, navigationEvent.navigationTrigger && {\n            navigationTrigger: navigationEvent.navigationTrigger\n          })\n        });\n      }\n    }));\n    this.navEnd$ = this._router.events.pipe(filter(function (event) {\n      return event instanceof NavigationEnd;\n    }), tap(function () {\n      if (_this._routingSpan) {\n        runOutsideAngular(function () {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          _this._routingSpan.finish();\n        });\n        _this._routingSpan = null;\n      }\n    }));\n    this._routingSpan = null;\n    this._subscription = new Subscription();\n    this._subscription.add(this.navStart$.subscribe());\n    this._subscription.add(this.navEnd$.subscribe());\n  }\n  /**\n   * This is used to prevent memory leaks when the root view is created and destroyed multiple times,\n   * since `subscribe` callbacks capture `this` and prevent many resources from being GC'd.\n   */\n  TraceService.prototype.ngOnDestroy = function () {\n    this._subscription.unsubscribe();\n  };\n  TraceService = __decorate([Injectable({\n    providedIn: 'root'\n  })], TraceService);\n  return TraceService;\n}();\nexport { TraceService };\nvar UNKNOWN_COMPONENT = 'unknown';\n/**\n * A directive that can be used to capture initialization lifecycle of the whole component.\n */\nvar TraceDirective = /** @class */function () {\n  function TraceDirective() {\n    this.componentName = UNKNOWN_COMPONENT;\n  }\n  /**\n   * Implementation of OnInit lifecycle method\n   * @inheritdoc\n   */\n  TraceDirective.prototype.ngOnInit = function () {\n    var activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      this._tracingSpan = activeTransaction.startChild({\n        description: \"<\" + this.componentName + \">\",\n        op: ANGULAR_INIT_OP\n      });\n    }\n  };\n  /**\n   * Implementation of AfterViewInit lifecycle method\n   * @inheritdoc\n   */\n  TraceDirective.prototype.ngAfterViewInit = function () {\n    if (this._tracingSpan) {\n      this._tracingSpan.finish();\n    }\n  };\n  __decorate([Input('trace')], TraceDirective.prototype, \"componentName\", void 0);\n  TraceDirective = __decorate([Directive({\n    selector: '[trace]'\n  })], TraceDirective);\n  return TraceDirective;\n}();\nexport { TraceDirective };\n/**\n * A module serves as a single compilation unit for the `TraceDirective` and can be re-used by any other module.\n */\nvar TraceModule = /** @class */function () {\n  function TraceModule() {}\n  TraceModule = __decorate([NgModule({\n    declarations: [TraceDirective],\n    exports: [TraceDirective]\n  })], TraceModule);\n  return TraceModule;\n}();\nexport { TraceModule };\n/**\n * Decorator function that can be used to capture initialization lifecycle of the whole component.\n */\nexport function TraceClassDecorator() {\n  var tracingSpan;\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  return function (target) {\n    var originalOnInit = target.prototype.ngOnInit;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    target.prototype.ngOnInit = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        tracingSpan = activeTransaction.startChild({\n          description: \"<\" + target.name + \">\",\n          op: ANGULAR_INIT_OP\n        });\n      }\n      if (originalOnInit) {\n        return originalOnInit.apply(this, args);\n      }\n    };\n    var originalAfterViewInit = target.prototype.ngAfterViewInit;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    target.prototype.ngAfterViewInit = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      if (tracingSpan) {\n        tracingSpan.finish();\n      }\n      if (originalAfterViewInit) {\n        return originalAfterViewInit.apply(this, args);\n      }\n    };\n  };\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n/**\n * Decorator function that can be used to capture a single lifecycle methods of the component.\n */\nexport function TraceMethodDecorator() {\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/ban-types\n  return function (target, propertyKey, descriptor) {\n    var originalMethod = descriptor.value;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    descriptor.value = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var now = timestampWithMs();\n      var activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        activeTransaction.startChild({\n          description: \"<\" + target.constructor.name + \">\",\n          endTimestamp: now,\n          op: ANGULAR_OP + \".\" + String(propertyKey),\n          startTimestamp: now\n        });\n      }\n      if (originalMethod) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return originalMethod.apply(this, args);\n      }\n    };\n    return descriptor;\n  };\n}\n//# sourceMappingURL=tracing.js.map","map":null,"metadata":{},"sourceType":"module"}