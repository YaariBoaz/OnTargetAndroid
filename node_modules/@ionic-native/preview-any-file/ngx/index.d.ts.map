{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface PreviewAnyFileOptions {\n    /**\n     * The name of the file to preview.\n     */\n    name?: string;\n    /**\n     * The mime type of the file to preview.\n     */\n    mimeType: string;\n}\n/**\n * @name PreviewAnyFile\n * @description\n * Whatever the file is PDF document, Word document, Excel, office document,zip archive file, image, text, html or anything else, you can perform a preview by this cordova Plugin to preview any file in native mode by providing the local or external URL.\n *\n *  Requires Cordova plugin: `cordova-plugin-preview-any-file`. For more info, please see the [previewAnyFile plugin docs](https://github.com/mostafa-mansour1/previewAnyFile).\n *\n * @usage\n * ```typescript\n * import { PreviewAnyFile } from '@ionic-native/preview-any-file/ngx';\n *\n *\n * constructor(private previewAnyFile: PreviewAnyFile) { }\n *\n * ...\n *\n *\n * this.previewAnyFile.preview('file://filepath.ext')\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n *\n *\n * ...\n *\n *\n * this.previewAnyFile.previewPath('http://www.domain.com/samplefile')\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\nexport declare class PreviewAnyFile extends IonicNativePlugin {\n    /**\n     * this function return SUCCESS in success callback if the file successfully opened, if the content is base64 you have to write it into file by cordova-plugin-file\n     * @param url {string} full absolute URL for the file, if the path is content:// you need to resolve the native url, if the path is https:// it may not work in android\n     * @return {Promise<any>} Returns a promise that resolves if the file opened reject if not;\n     */\n    preview(url: string): Promise<string>;\n    /**\n     * previewPath function will return success callback if the file successfully opened, if the content is base64 you have to use previewBase64 method\n     * @param base64 {String} base64 string content\n     * @param options {PreviewAnyFileOptions} define the name of the file with extension or it's mimeType, if the correct extension not exist in the path\n     */\n    previewBase64(base64: string, options?: PreviewAnyFileOptions): Promise<string>;\n    /**\n     * previewPath function will return success callback if the file successfully opened, if the content is base64 you have to use previewBase64 method\n     * @param url {String} full absolute URL -> file://, content://, http://, https, ... etc, if extension not exist, you must define it in the opt param\n     * @param options {PreviewAnyFileOptions} define the name of the file with extension or it's mimeType, if the correct extension not exist in the path\n     */\n    previewPath(url: string, options?: PreviewAnyFileOptions): Promise<string>;\n    /**\n     * previewPath function will return success callback if the file successfully opened, if the content is base64 you have to use previewBase64 method\n     * @param url {String} full absolute URL -> file://, content://, http://, https, ... etc, if extension not exist, you must define it in the opt param\n     * @param options {PreviewAnyFileOptions} define the name of the file with extension or it's mimeType, if the correct extension not exist in the path\n     */\n    previewAsset(url: string, options?: PreviewAnyFileOptions): Promise<string>;\n}\n"]}