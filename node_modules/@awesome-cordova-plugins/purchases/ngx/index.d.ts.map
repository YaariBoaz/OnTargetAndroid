{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { AwesomeCordovaNativePlugin } from '@awesome-cordova-plugins/core';\nimport { Observable } from 'rxjs';\n/**\n * @deprecated use ATTRIBUTION_NETWORK instead\n *\n * Enum for attribution networks\n * @readonly\n * @enum {number}\n */\nexport declare enum ATTRIBUTION_NETWORKS {\n    APPLE_SEARCH_ADS = 0,\n    ADJUST = 1,\n    APPSFLYER = 2,\n    BRANCH = 3,\n    TENJIN = 4,\n    FACEBOOK = 5\n}\nexport declare enum ATTRIBUTION_NETWORK {\n    APPLE_SEARCH_ADS = 0,\n    ADJUST = 1,\n    APPSFLYER = 2,\n    BRANCH = 3,\n    TENJIN = 4,\n    FACEBOOK = 5\n}\nexport declare enum PURCHASE_TYPE {\n    /**\n     * A type of SKU for in-app products.\n     */\n    INAPP = \"inapp\",\n    /**\n     * A type of SKU for subscriptions.\n     */\n    SUBS = \"subs\"\n}\n/**\n * Enum for billing features.\n * Currently, these are only relevant for Google Play Android users:\n * https://developer.android.com/reference/com/android/billingclient/api/BillingClient.FeatureType\n */\nexport declare enum BILLING_FEATURE {\n    /**\n     * Purchase/query for subscriptions.\n     */\n    SUBSCRIPTIONS = 0,\n    /**\n     * Subscriptions update/replace.\n     */\n    SUBSCRIPTIONS_UPDATE = 1,\n    /**\n     * Purchase/query for in-app items on VR.\n     */\n    IN_APP_ITEMS_ON_VR = 2,\n    /**\n     * Purchase/query for subscriptions on VR.\n     */\n    SUBSCRIPTIONS_ON_VR = 3,\n    /**\n     * Launch a price change confirmation flow.\n     */\n    PRICE_CHANGE_CONFIRMATION = 4\n}\n/**\n * @deprecated use PURCHASE_TYPE instead\n *\n * Enum for attribution networks\n * @readonly\n * @enum {string}\n */\nexport declare enum ProductType {\n    SUBS = \"subs\",\n    INAPP = \"inapp\"\n}\nexport declare enum PRORATION_MODE {\n    UNKNOWN_SUBSCRIPTION_UPGRADE_DOWNGRADE_POLICY = 0,\n    /**\n     * Replacement takes effect immediately, and the remaining time will be\n     * prorated and credited to the user. This is the current default behavior.\n     */\n    IMMEDIATE_WITH_TIME_PRORATION = 1,\n    /**\n     * Replacement takes effect immediately, and the billing cycle remains the\n     * same. The price for the remaining period will be charged. This option is\n     * only available for subscription upgrade.\n     */\n    IMMEDIATE_AND_CHARGE_PRORATED_PRICE = 2,\n    /**\n     * Replacement takes effect immediately, and the new price will be charged on\n     * next recurrence time. The billing cycle stays the same.\n     */\n    IMMEDIATE_WITHOUT_PRORATION = 3,\n    /**\n     * Replacement takes effect when the old plan expires, and the new price will\n     * be charged at the same time.\n     */\n    DEFERRED = 4\n}\nexport declare enum PACKAGE_TYPE {\n    /**\n     * A package that was defined with a custom identifier.\n     */\n    UNKNOWN = \"UNKNOWN\",\n    /**\n     * A package that was defined with a custom identifier.\n     */\n    CUSTOM = \"CUSTOM\",\n    /**\n     * A package configured with the predefined lifetime identifier.\n     */\n    LIFETIME = \"LIFETIME\",\n    /**\n     * A package configured with the predefined annual identifier.\n     */\n    ANNUAL = \"ANNUAL\",\n    /**\n     * A package configured with the predefined six month identifier.\n     */\n    SIX_MONTH = \"SIX_MONTH\",\n    /**\n     * A package configured with the predefined three month identifier.\n     */\n    THREE_MONTH = \"THREE_MONTH\",\n    /**\n     * A package configured with the predefined two month identifier.\n     */\n    TWO_MONTH = \"TWO_MONTH\",\n    /**\n     * A package configured with the predefined monthly identifier.\n     */\n    MONTHLY = \"MONTHLY\",\n    /**\n     * A package configured with the predefined weekly identifier.\n     */\n    WEEKLY = \"WEEKLY\"\n}\nexport declare enum INTRO_ELIGIBILITY_STATUS {\n    /**\n     * RevenueCat doesn't have enough information to determine eligibility.\n     */\n    INTRO_ELIGIBILITY_STATUS_UNKNOWN = 0,\n    /**\n     * The user is not eligible for a free trial or intro pricing for this product.\n     */\n    INTRO_ELIGIBILITY_STATUS_INELIGIBLE = 1,\n    /**\n     * The user is eligible for a free trial or intro pricing for this product.\n     */\n    INTRO_ELIGIBILITY_STATUS_ELIGIBLE = 2\n}\n/**\n * @name Purchases\n * @description\n * Purchases is a cross platform solution for managing in-app subscriptions. A backend is also provided via [RevenueCat](https://www.revenuecat.com)\n *\n * ## Features\n * |     | RevenueCat                                                                                                                                                   |\n * | --- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n * | ✅  | Server-side receipt validation                                                                                                                               |\n * | ➡️  | [Webhooks](https://docs.revenuecat.com/docs/webhooks) - enhanced server-to-server communication with events for purchases, renewals, cancellations, and more |\n * | 🎯  | Subscription status tracking - know whether a user is subscribed whether they're on iOS, Android or web                                                      |\n * | 📊  | Analytics - automatic calculation of metrics like conversion, mrr, and churn                                                                                 |\n * | 📝  | [Online documentation](https://docs.revenuecat.com/docs) up to date                                                                                          |\n * | 🔀  | [Integrations](https://www.revenuecat.com/integrations) - over a dozen integrations to easily send purchase data where you need it                           |\n * | 💯  | Well maintained - [frequent releases](https://github.com/RevenueCat/cordova-plugin-purchases/releases)                                                                  |\n * | 📮  | Great support - [Help Center](https://revenuecat.zendesk.com)                                                                                           |\n * | 🤩  | Awesome [new features](https://trello.com/b/RZRnWRbI/revenuecat-product-roadmap)                                                                             |\n *\n * ## Getting Started\n *\n * For more detailed information, you can view our complete documentation at [docs.revenuecat.com](https://docs.revenuecat.com/docs).\n * @usage\n * #### 1. Get a RevenueCat API key\n *\n * Log in to the [RevenueCat dashboard](https://app.revenuecat.com) and obtain a free API key for your application.\n *\n * #### 2. Initialize the SDK\n *\n * You should only configure _Purchases_ once (usually on app launch) as soon as your app has a unique user id for your user. This can be when a user logs in if you have accounts or on launch if you can generate a random user identifier.\n *\n * ```typescript\n *  import { Platform } from \"@ionic/angular\";\n *  import { Purchases } from \"@awesome-cordova-plugins/purchases/ngx\";\n *\n *  constructor(public platform: Platform, private purchases: Purchases) {\n *      platform.ready().then(() => {\n *          this.purchases.setDebugLogsEnabled(true); // Enable to get debug logs\n *          this.purchases.setup(\"my_api_key\", \"my_app_user_id\");\n *      }\n *  }\n * ```\n *\n * #### 3. Quickstart\n * Please follow the [Quickstart Guide](https://docs.revenuecat.com/docs/) for more information on how to use the SDK\n *\n * ### Requirements\n * Requires XCode 11.0+ and minimum target iOS 9.0+\n * This plugin has been tested with cordova-plugin-purchases@\n * @interfaces\n * PurchasesError\n * IntroEligibility\n * UpgradeInfo\n * PurchasesOfferings\n * PurchasesOffering\n * PurchasesPackage\n * PurchasesProduct\n * PurchaserInfo\n * PurchasesEntitlementInfos\n * PurchasesEntitlementInfo\n * PurchasesTransaction\n */\nexport declare class Purchases extends AwesomeCordovaNativePlugin {\n    static ATTRIBUTION_NETWORKS: typeof ATTRIBUTION_NETWORK;\n    /**\n     * Enum for attribution networks\n     *\n     * @readonly\n     * @enum {number}\n     */\n    static ATTRIBUTION_NETWORK: typeof ATTRIBUTION_NETWORK;\n    /**\n     * Supported SKU types.\n     *\n     * @readonly\n     * @enum {string}\n     */\n    static PURCHASE_TYPE: typeof PURCHASE_TYPE;\n    /**\n     * Enum for billing features.\n     * Currently, these are only relevant for Google Play Android users:\n     * https://developer.android.com/reference/com/android/billingclient/api/BillingClient.FeatureType\n     */\n    static BILLING_FEATURE: typeof BILLING_FEATURE;\n    /**\n     * Replace SKU's ProrationMode.\n     *\n     * @readonly\n     * @enum {number}\n     */\n    static PRORATION_MODE: typeof PRORATION_MODE;\n    /**\n     * Enumeration of all possible Package types.\n     *\n     * @readonly\n     * @enum {string}\n     */\n    static PACKAGE_TYPE: typeof PACKAGE_TYPE;\n    /**\n     * Enum of different possible states for intro price eligibility status.\n     *\n     * @readonly\n     * @enum {number}\n     */\n    static INTRO_ELIGIBILITY_STATUS: typeof INTRO_ELIGIBILITY_STATUS;\n    /**\n     * Sets up Purchases with your API key and an app user id.\n     *\n     * @param {string} apiKey RevenueCat API Key. Needs to be a String\n     * @param {string?} appUserID A unique id for identifying the user\n     * @param {boolean} observerMode An optional boolean. Set this to TRUE if you have your own IAP implementation and\n     * want to use only RevenueCat's backend. Default is FALSE. If you are on Android and setting this to ON, you will have\n     * to acknowledge the purchases yourself.\n     * @param {string?} userDefaultsSuiteName An optional string. iOS-only, will be ignored for Android.\n     * Set this if you would like the RevenueCat SDK to store its preferences in a different NSUserDefaults\n     * suite, otherwise it will use standardUserDefaults. Default is null, which will make the SDK use standardUserDefaults.\n     */\n    setup(apiKey: string, appUserID?: string | null, observerMode?: boolean, userDefaultsSuiteName?: string): void;\n    /**\n     * Set this to true if you are passing in an appUserID but it is anonymous, this is true by default if you didn't pass an appUserID\n     * If a user tries to purchase a product that is active on the current app store account, we will treat it as a restore and alias\n     * the new ID with the previous id.\n     *\n     * @param allowSharing {boolean} true if enabled, false to disabled\n     */\n    setAllowSharingStoreAccount(allowSharing: boolean): void;\n    /**\n     * Add a dict of attribution information\n     *\n     * @deprecated Use the set<NetworkId> functions instead.\n     * @param {object} data Attribution data from any of the attribution networks in Purchases.ATTRIBUTION_NETWORKS\n     * @param {ATTRIBUTION_NETWORK} network Which network, see Purchases.ATTRIBUTION_NETWORK\n     * @param {string?} networkUserId An optional unique id for identifying the user. Needs to be a string.\n     */\n    addAttributionData(data: {\n        [key: string]: any;\n    }, network: ATTRIBUTION_NETWORK, networkUserId?: string): void;\n    /**\n     * Gets the Offerings configured in the dashboard\n     *\n     * @returns {Promise<PurchasesOfferings>} Will return a [PurchasesError] if the offerings are not properly configured in RevenueCat or if there is another error retrieving them.\n     */\n    getOfferings(): Promise<PurchasesOfferings>;\n    /**\n     * Fetch the product info\n     *\n     * @param {string[]} productIdentifiers Array of product identifiers\n     * @param {PURCHASE_TYPE} type Optional type of products to fetch, can be inapp or subs. Subs by default\n     * @returns {Promise<PurchasesProduct[]>} Will return a [PurchasesError] if the products are not properly configured in RevenueCat or if there is another error retrieving them.\n     */\n    getProducts(productIdentifiers: string[], type?: PURCHASE_TYPE): Promise<PurchasesProduct[]>;\n    /**\n     * @typedef {Object} MakePurchaseResponse\n     * @property {string} productIdentifier - The product identifier that has been purchased\n     * @property {PurchaserInfo} purchaserInfo - The new PurchaserInfo after the successful purchase\n     */\n    /**\n     * Make a purchase\n     *\n     * @param {string} productIdentifier The product identifier of the product you want to purchase.\n     * @param {UpgradeInfo} upgradeInfo Android only. Optional UpgradeInfo you wish to upgrade from containing the oldSKU\n     * and the optional prorationMode.\n     * @param {PURCHASE_TYPE} type Optional type of product, can be inapp or subs. Subs by default\n     * @returns {Promise<MakePurchaseResponse>} A [PurchasesError] is triggered after an error or when the user cancels the purchase.\n     * If user cancelled, userCancelled will be true\n     */\n    purchaseProduct(productIdentifier: string, upgradeInfo?: UpgradeInfo | null, type?: PURCHASE_TYPE): Promise<{\n        productIdentifier: string;\n        purchaserInfo: PurchaserInfo;\n    }>;\n    /**\n     * Make a purchase\n     *\n     * @param {PurchasesPackage} aPackage The Package you wish to purchase. You can get the Packages by calling getOfferings\n     * @param {UpgradeInfo} upgradeInfo Android only. Optional UpgradeInfo you wish to upgrade from containing the oldSKU\n     * and the optional prorationMode.\n     * @returns {Promise<MakePurchaseResponse>} A [PurchasesError] is triggered after an error or when the user cancels the purchase.\n     * If user cancelled, userCancelled will be true\n     */\n    purchasePackage(aPackage: PurchasesPackage, upgradeInfo?: UpgradeInfo | null): Promise<{\n        productIdentifier: string;\n        purchaserInfo: PurchaserInfo;\n    }>;\n    /**\n     * Restores a user's previous purchases and links their appUserIDs to any user's also using those purchases.\n     *\n     * @returns {Promise<PurchaserInfo>} Errors are of type [PurchasesError]\n     */\n    restoreTransactions(): Promise<PurchaserInfo>;\n    /**\n     * Get the appUserID that is currently in placed in the SDK\n     *\n     * @returns {string}\n     */\n    getAppUserID(): string;\n    /**\n     * This function will logIn the current user with an appUserID. Typically this would be used after a log in\n     * to identify a user without calling configure.\n     *\n     * @param {string} appUserID The appUserID that should be linked to the currently user\n     * @returns {Promise<LogInResult>} an object that contains the purchaserInfo after logging in, as well as a boolean indicating\n     * whether the user has just been created for the first time in the RevenueCat backend.\n     */\n    logIn(appUserID: string): Promise<LogInResult>;\n    /**\n     * Logs out the Purchases client clearing the saved appUserID. This will generate a random user id and save it in the cache.\n     * If the current user is already anonymous, this will produce a PurchasesError.\n     *\n     * @returns {Promise<PurchaserInfo>} new purchaser info after resetting.\n     */\n    logOut(): Promise<PurchaserInfo>;\n    /**\n     * @deprecated, use logIn instead.\n     * This function will alias two appUserIDs together.\n     * @param newAppUserID {String} The new appUserID that should be linked to the currently identified appUserID. Needs to be a string.\n     * @returns {Promise<PurchaserInfo>} Errors are of type [PurchasesError] and get normally triggered if there\n     * is an error retrieving the new purchaser info for the new user or if there is an error creating the alias.\n     */\n    createAlias(newAppUserID: string): Promise<PurchaserInfo>;\n    /**\n     * @deprecated, use logIn instead.\n     * This function will identify the current user with an appUserID. Typically this would be used after a logout to identify a new user without calling configure\n     * @param newAppUserID {String} The new appUserID that should be linked to the currently identified appUserID. Needs to be a string.\n     * @returns {Promise<PurchaserInfo>} Errors are of type [PurchasesError] and get normally triggered if there\n     * is an error retrieving the new purchaser info for the new user.\n     */\n    identify(newAppUserID: string): Promise<PurchaserInfo>;\n    /**\n     * @deprecated, use logOut instead.\n     * Resets the Purchases client clearing the saved appUserID. This will generate a random user id and save it in the cache.\n     * @returns {Promise<PurchaserInfo>} Errors are of type [PurchasesError] and get normally triggered if there\n     * is an error retrieving the new purchaser info for the new user.\n     */\n    reset(): Promise<PurchaserInfo>;\n    /**\n     * Gets the current purchaser info. This call will return the cached purchaser info unless the cache is stale, in which case,\n     * it will make a network call to retrieve it from the servers.\n     *\n     * @returns {Promise<PurchaserInfo>} Errors are of type [PurchasesError] and get normally triggered if there\n     * is an error retrieving the purchaser info.\n     */\n    getPurchaserInfo(): Promise<PurchaserInfo>;\n    /**\n     * Returns an observable that can be used to receive updates on the purchaser info\n     *\n     * @returns {Observable<PurchaserInfo>}\n     */\n    onPurchaserInfoUpdated(): Observable<PurchaserInfo>;\n    /**\n     * Enables/Disables debugs logs\n     *\n     * @param {boolean} enabled true to enable debug logs, false to disable\n     */\n    setDebugLogsEnabled(enabled: boolean): void;\n    /**\n     * This method will send all the purchases to the RevenueCat backend. Call this when using your own implementation\n     * for subscriptions anytime a sync is needed, like after a successful purchase.\n     *\n     * @warning This function should only be called if you're not calling purchaseProduct.\n     */\n    syncPurchases(): void;\n    /**\n     * iOS only.\n     *\n     * @param {boolean} enabled Set this property to true *only* when testing the ask-to-buy / SCA purchases flow.\n     * More information: http://errors.rev.cat/ask-to-buy\n     */\n    setSimulatesAskToBuyInSandbox(enabled: boolean): void;\n    /**\n     * Enable automatic collection of Apple Search Ads attribution. Disabled by default.\n     *\n     * @param {boolean} enabled Enable or not automatic collection\n     */\n    setAutomaticAppleSearchAdsAttributionCollection(enabled: boolean): void;\n    /**\n     * @returns {Promise<boolean>} A boolean indicating if the `appUserID` has been generated\n     * by RevenueCat or not.\n     */\n    isAnonymous(): boolean;\n    /**\n     *  iOS only. Computes whether or not a user is eligible for the introductory pricing period of a given product.\n     *  You should use this method to determine whether or not you show the user the normal product price or the\n     *  introductory price. This also applies to trials (trials are considered a type of introductory pricing).\n     *\n     *  @note Subscription groups are automatically collected for determining eligibility. If RevenueCat can't\n     *  definitively compute the eligibility, most likely because of missing group information, it will return\n     *  `INTRO_ELIGIBILITY_STATUS_UNKNOWN`. The best course of action on unknown status is to display the non-intro\n     *  pricing, to not create a misleading situation. To avoid this, make sure you are testing with the latest version of\n     *  iOS so that the subscription group can be collected by the SDK. Android always returns INTRO_ELIGIBILITY_STATUS_UNKNOWN.\n     *  @param productIdentifiers Array of product identifiers for which you want to compute eligibility\n     *  @returns { Promise<Object.<string, IntroEligibility>> } Map of IntroEligibility per productId\n     */\n    checkTrialOrIntroductoryPriceEligibility(productIdentifiers: string[]): Promise<{\n        [productId: string]: IntroEligibility;\n    }>;\n    /**\n     * Sets a function to be called on purchases initiated on the Apple App Store. This is only used in iOS.\n     *\n     * @param {ShouldPurchasePromoProductListener} shouldPurchasePromoProductListener Called when a user initiates a\n     * promotional in-app purchase from the App Store. If your app is able to handle a purchase at the current time, run\n     * the deferredPurchase function. If the app is not in a state to make a purchase: cache the deferredPurchase, then\n     * call the deferredPurchase when the app is ready to make the promotional purchase.\n     * If the purchase should never be made, you don't need to ever call the deferredPurchase and the app will not\n     * proceed with promotional purchases.\n     */\n    addShouldPurchasePromoProductListener(shouldPurchasePromoProductListener: ShouldPurchasePromoProductListener): void;\n    /**\n     * Removes a given ShouldPurchasePromoProductListener\n     *\n     * @param {ShouldPurchasePromoProductListener} listenerToRemove ShouldPurchasePromoProductListener reference of the listener to remove\n     * @returns {boolean} True if listener was removed, false otherwise\n     */\n    removeShouldPurchasePromoProductListener(listenerToRemove: ShouldPurchasePromoProductListener): boolean;\n    /**\n     * Invalidates the cache for purchaser information.\n     *\n     * Most apps will not need to use this method; invalidating the cache can leave your app in an invalid state.\n     * Refer to https://docs.revenuecat.com/docs/purchaserinfo#section-get-user-information for more information on\n     * using the cache properly.\n     *\n     * This is useful for cases where purchaser information might have been updated outside of the\n     * app, like if a promotional subscription is granted through the RevenueCat dashboard.\n     */\n    invalidatePurchaserInfoCache(): void;\n    /**\n     * iOS only. Presents a code redemption sheet, useful for redeeming offer codes\n     * Refer to https://docs.revenuecat.com/docs/ios-subscription-offers#offer-codes for more information on how\n     * to configure and use offer codes.\n     */\n    presentCodeRedemptionSheet(): void;\n    /**\n     * Subscriber attributes are useful for storing additional, structured information on a user.\n     * Since attributes are writable using a public key they should not be used for\n     * managing secure or sensitive information such as subscription status, coins, etc.\n     *\n     * Key names starting with \"$\" are reserved names used by RevenueCat. For a full list of key\n     * restrictions refer to our guide: https://docs.revenuecat.com/docs/subscriber-attributes\n     *\n     * @param attributes Map of attributes by key. Set the value as an empty string to delete an attribute.\n     */\n    setAttributes(attributes: {\n        [key: string]: string | null;\n    }): void;\n    /**\n     * Subscriber attribute associated with the email address for the user\n     *\n     * @param email Empty String or null will delete the subscriber attribute.\n     */\n    setEmail(email: string | null): void;\n    /**\n     * Subscriber attribute associated with the phone number for the user\n     *\n     * @param phoneNumber Empty String or null will delete the subscriber attribute.\n     */\n    setPhoneNumber(phoneNumber: string | null): void;\n    /**\n     * Subscriber attribute associated with the display name for the user\n     *\n     * @param displayName Empty String or null will delete the subscriber attribute.\n     */\n    setDisplayName(displayName: string | null): void;\n    /**\n     * Subscriber attribute associated with the push token for the user\n     *\n     * @param pushToken Empty String or null will delete the subscriber attribute.\n     */\n    setPushToken(pushToken: string | null): void;\n    /**\n     * Subscriber attribute associated with the install media source for the user\n     *\n     * @param mediaSource Empty String or null will delete the subscriber attribute.\n     */\n    setMediaSource(mediaSource: string | null): void;\n    /**\n     * Subscriber attribute associated with the install campaign for the user\n     *\n     * @param campaign Empty String or null will delete the subscriber attribute.\n     */\n    setCampaign(campaign: string | null): void;\n    /**\n     * Subscriber attribute associated with the install ad group for the user\n     *\n     * @param adGroup Empty String or null will delete the subscriber attribute.\n     */\n    setAdGroup(adGroup: string | null): void;\n    /**\n     * Subscriber attribute associated with the install ad for the user\n     *\n     * @param ad Empty String or null will delete the subscriber attribute.\n     */\n    setAd(ad: string | null): void;\n    /**\n     * Subscriber attribute associated with the install keyword for the user\n     *\n     * @param keyword Empty String or null will delete the subscriber attribute.\n     */\n    setKeyword(keyword: string | null): void;\n    /**\n     * Subscriber attribute associated with the install ad creative for the user\n     *\n     * @param creative Empty String or null will delete the subscriber attribute.\n     */\n    setCreative(creative: string | null): void;\n    /**\n     * Subscriber attribute associated with the Adjust Id for the user\n     * Required for the RevenueCat Adjust integration\n     *\n     * @param adjustID Empty String or null will delete the subscriber attribute.\n     */\n    setAdjustID(adjustID: string | null): void;\n    /**\n     * Subscriber attribute associated with the AppsFlyer Id for the user\n     * Required for the RevenueCat AppsFlyer integration\n     *\n     * @param appsflyerID Empty String or null will delete the subscriber attribute.\n     */\n    setAppsflyerID(appsflyerID: string | null): void;\n    /**\n     * Subscriber attribute associated with the Facebook SDK Anonymous Id for the user\n     * Recommended for the RevenueCat Facebook integration\n     *\n     * @param fbAnonymousID Empty String or null will delete the subscriber attribute.\n     */\n    setFBAnonymousID(fbAnonymousID: string | null): void;\n    /**\n     * Subscriber attribute associated with the mParticle Id for the user\n     * Recommended for the RevenueCat mParticle integration\n     *\n     * @param mparticleID Empty String or null will delete the subscriber attribute.\n     */\n    setMparticleID(mparticleID: string | null): void;\n    /**\n     * Subscriber attribute associated with the OneSignal Player Id for the user\n     * Required for the RevenueCat OneSignal integration\n     *\n     * @param onesignalID Empty String or null will delete the subscriber attribute.\n     */\n    setOnesignalID(onesignalID: string | null): void;\n    /**\n     * Subscriber attribute associated with the Airship Channel Id for the user\n     * Required for the RevenueCat Airship integration\n     *\n     * @param airshipChannelID Empty String or null will delete the subscriber attribute.\n     */\n    setAirshipChannelID(airshipChannelID: string | null): void;\n    /**\n     * Automatically collect subscriber attributes associated with the device identifiers.\n     * $idfa, $idfv, $ip on iOS\n     * $gpsAdId, $androidId, $ip on Android\n     */\n    collectDeviceIdentifiers(): void;\n    /**\n     * Check if billing is supported for the current user (meaning IN-APP purchases are supported)\n     * and optionally, whether a list of specified feature types are supported.\n     *\n     * Note: Billing features are only relevant to Google Play Android users.\n     * For other stores and platforms, billing features won't be checked.\n     *\n     * @param feature An array of feature types to check for support. Feature types must be one of\n     *       [BILLING_FEATURE]. By default, is an empty list and no specific feature support will be checked.\n     * @param features\n     * @returns {Promise<boolean>} Or [PurchasesError] if there is an error.\n     */\n    canMakePayments(features?: BILLING_FEATURE[]): Promise<boolean>;\n    /**\n     * Set this property to your proxy URL before configuring Purchases *only* if you've received a proxy key value from your RevenueCat contact.\n     *\n     * @param url Proxy URL as a string.\n     */\n    setProxyURL(url: string): void;\n}\n/**\n * @deprecated use PurchasesProduct instead\n */\nexport interface RCProduct {\n}\n/**\n * @deprecated use PurchaserInfo instead\n */\nexport interface RCPurchaserInfo {\n}\n/**\n * @deprecated use PurchasesError instead\n */\nexport interface RCError {\n}\n/**\n * The EntitlementInfo object gives you access to all of the information about the status of a user entitlement.\n */\nexport interface PurchasesEntitlementInfo {\n    /**\n     * The entitlement identifier configured in the RevenueCat dashboard\n     */\n    readonly identifier: string;\n    /**\n     * True if the user has access to this entitlement\n     */\n    readonly isActive: boolean;\n    /**\n     * True if the underlying subscription is set to renew at the end of the billing period (expirationDate).\n     * Will always be True if entitlement is for lifetime access.\n     */\n    readonly willRenew: boolean;\n    /**\n     * The last period type this entitlement was in. Either: NORMAL, INTRO, TRIAL.\n     */\n    readonly periodType: string;\n    /**\n     * The latest purchase or renewal date for the entitlement.\n     */\n    readonly latestPurchaseDate: string;\n    /**\n     * The first date this entitlement was purchased.\n     */\n    readonly originalPurchaseDate: string;\n    /**\n     * The expiration date for the entitlement, can be `null` for lifetime access. If the `periodType` is `trial`,\n     * this is the trial expiration date.\n     */\n    readonly expirationDate: string | null;\n    /**\n     * The store where this entitlement was unlocked from. Either: appStore, macAppStore, playStore, stripe,\n     * promotional, unknownStore\n     */\n    readonly store: string;\n    /**\n     * The product identifier that unlocked this entitlement\n     */\n    readonly productIdentifier: string;\n    /**\n     * False if this entitlement is unlocked via a production purchase\n     */\n    readonly isSandbox: boolean;\n    /**\n     * The date an unsubscribe was detected. Can be `null`.\n     *\n     * @note: Entitlement may still be active even if user has unsubscribed. Check the `isActive` property.\n     */\n    readonly unsubscribeDetectedAt: string | null;\n    /**\n     * The date a billing issue was detected. Can be `null` if there is no billing issue or an issue has been resolved\n     *\n     * @note: Entitlement may still be active even if there is a billing issue. Check the `isActive` property.\n     */\n    readonly billingIssueDetectedAt: string | null;\n}\n/**\n * Contains all the entitlements associated to the user.\n */\nexport interface PurchasesEntitlementInfos {\n    /**\n     * Map of all EntitlementInfo (`PurchasesEntitlementInfo`) objects (active and inactive) keyed by entitlement identifier.\n     */\n    readonly all: {\n        [key: string]: PurchasesEntitlementInfo;\n    };\n    /**\n     * Map of active EntitlementInfo (`PurchasesEntitlementInfo`) objects keyed by entitlement identifier.\n     */\n    readonly active: {\n        [key: string]: PurchasesEntitlementInfo;\n    };\n}\nexport interface PurchaserInfo {\n    /**\n     * Entitlements attached to this purchaser info\n     */\n    readonly entitlements: PurchasesEntitlementInfos;\n    /**\n     * Set of active subscription skus\n     */\n    readonly activeSubscriptions: [string];\n    /**\n     * Set of purchased skus, active and inactive\n     */\n    readonly allPurchasedProductIdentifiers: [string];\n    /**\n     * Returns all the non-subscription purchases a user has made.\n     * The purchases are ordered by purchase date in ascending order.\n     */\n    readonly nonSubscriptionTransactions: PurchasesTransaction[];\n    /**\n     * The latest expiration date of all purchased skus\n     */\n    readonly latestExpirationDate: string | null;\n    /**\n     * The date this user was first seen in RevenueCat.\n     */\n    readonly firstSeen: string;\n    /**\n     * The original App User Id recorded for this user.\n     */\n    readonly originalAppUserId: string;\n    /**\n     * Date when this info was requested\n     */\n    readonly requestDate: string;\n    /**\n     * Map of skus to expiration dates\n     */\n    readonly allExpirationDates: {\n        [key: string]: string | null;\n    };\n    /**\n     * Map of skus to purchase dates\n     */\n    readonly allPurchaseDates: {\n        [key: string]: string | null;\n    };\n    /**\n     * Returns the version number for the version of the application when the\n     * user bought the app. Use this for grandfathering users when migrating\n     * to subscriptions.\n     *\n     * This corresponds to the value of CFBundleVersion (in iOS) in the\n     * Info.plist file when the purchase was originally made. This is always null\n     * in Android\n     */\n    readonly originalApplicationVersion: string | null;\n    /**\n     * Returns the purchase date for the version of the application when the user bought the app.\n     * Use this for grandfathering users when migrating to subscriptions.\n     */\n    readonly originalPurchaseDate: string | null;\n    /**\n     * URL to manage the active subscription of the user. If this user has an active iOS\n     * subscription, this will point to the App Store, if the user has an active Play Store subscription\n     * it will point there. If there are no active subscriptions it will be null.\n     * If there are multiple for different platforms, it will point to the device store.\n     */\n    readonly managementURL: string | null;\n}\nexport interface PurchasesTransaction {\n    /**\n     * RevenueCat Id associated to the transaction.\n     */\n    readonly revenueCatId: string;\n    /**\n     * Product Id associated with the transaction.\n     */\n    readonly productId: string;\n    /**\n     * Purchase date of the transaction in ISO 8601 format.\n     */\n    readonly purchaseDate: string;\n}\nexport interface PurchasesProduct {\n    /**\n     * Product Id.\n     */\n    readonly identifier: string;\n    /**\n     * Description of the product.\n     */\n    readonly description: string;\n    /**\n     * Title of the product.\n     */\n    readonly title: string;\n    /**\n     * Price of the product in the local currency.\n     */\n    readonly price: number;\n    /**\n     * Formatted price of the item, including its currency sign, such as €3.99.\n     */\n    readonly price_string: string;\n    /**\n     * Currency code for price and original price.\n     */\n    readonly currency_code: string;\n    /**\n     * Introductory price of a subscription in the local currency.\n     */\n    readonly intro_price: number | null;\n    /**\n     * Formatted introductory price of a subscription, including its currency sign, such as €3.99.\n     */\n    readonly intro_price_string: string | null;\n    /**\n     * Billing period of the introductory price, specified in ISO 8601 format.\n     */\n    readonly intro_price_period: string | null;\n    /**\n     * Number of subscription billing periods for which the user will be given the introductory price, such as 3.\n     */\n    readonly intro_price_cycles: number | null;\n    /**\n     * Unit for the billing period of the introductory price, can be DAY, WEEK, MONTH or YEAR.\n     */\n    readonly intro_price_period_unit: string | null;\n    /**\n     * Number of units for the billing period of the introductory price.\n     */\n    readonly intro_price_period_number_of_units: number | null;\n}\n/**\n * Contains information about the product available for the user to purchase.\n * For more info see https://docs.revenuecat.com/docs/entitlements\n */\nexport interface PurchasesPackage {\n    /**\n     * Unique identifier for this package. Can be one a predefined package type or a custom one.\n     */\n    readonly identifier: string;\n    /**\n     * Package type for the product. Will be one of [PACKAGE_TYPE].\n     */\n    readonly packageType: PACKAGE_TYPE;\n    /**\n     * Product assigned to this package.\n     */\n    readonly product: PurchasesProduct;\n    /**\n     * Offering this package belongs to.\n     */\n    readonly offeringIdentifier: string;\n}\n/**\n * An offering is a collection of Packages (`PurchasesPackage`) available for the user to purchase.\n * For more info see https://docs.revenuecat.com/docs/entitlements\n */\nexport interface PurchasesOffering {\n    /**\n     * Unique identifier defined in RevenueCat dashboard.\n     */\n    readonly identifier: string;\n    /**\n     * Offering description defined in RevenueCat dashboard.\n     */\n    readonly serverDescription: string;\n    /**\n     * Array of `Package` objects available for purchase.\n     */\n    readonly availablePackages: PurchasesPackage[];\n    /**\n     * Lifetime package type configured in the RevenueCat dashboard, if available.\n     */\n    readonly lifetime: PurchasesPackage | null;\n    /**\n     * Annual package type configured in the RevenueCat dashboard, if available.\n     */\n    readonly annual: PurchasesPackage | null;\n    /**\n     * Six month package type configured in the RevenueCat dashboard, if available.\n     */\n    readonly sixMonth: PurchasesPackage | null;\n    /**\n     * Three month package type configured in the RevenueCat dashboard, if available.\n     */\n    readonly threeMonth: PurchasesPackage | null;\n    /**\n     * Two month package type configured in the RevenueCat dashboard, if available.\n     */\n    readonly twoMonth: PurchasesPackage | null;\n    /**\n     * Monthly package type configured in the RevenueCat dashboard, if available.\n     */\n    readonly monthly: PurchasesPackage | null;\n    /**\n     * Weekly package type configured in the RevenueCat dashboard, if available.\n     */\n    readonly weekly: PurchasesPackage | null;\n}\n/**\n * Contains all the offerings configured in RevenueCat dashboard.\n * For more info see https://docs.revenuecat.com/docs/entitlements\n */\nexport interface PurchasesOfferings {\n    /**\n     * Map of all Offerings [PurchasesOffering] objects keyed by their identifier.\n     */\n    readonly all: {\n        [key: string]: PurchasesOffering;\n    };\n    /**\n     * Current offering configured in the RevenueCat dashboard.\n     */\n    readonly current: PurchasesOffering | null;\n}\nexport interface PurchasesError {\n    code: number;\n    message: string;\n    readableErrorCode: string;\n    underlyingErrorMessage?: string;\n}\n/**\n * Holds the information used when upgrading from another sku. For Android use only.\n */\nexport interface UpgradeInfo {\n    /**\n     * The oldSKU to upgrade from.\n     */\n    readonly oldSKU: string;\n    /**\n     * The [PRORATION_MODE] to use when upgrading the given oldSKU.\n     */\n    readonly prorationMode?: PRORATION_MODE;\n}\n/**\n * Holds the introductory price status\n */\nexport interface IntroEligibility {\n    /**\n     * The introductory price eligibility status\n     */\n    readonly status: INTRO_ELIGIBILITY_STATUS;\n    /**\n     * Description of the status\n     */\n    readonly description: string;\n}\n/**\n * Holds the logIn result\n */\nexport interface LogInResult {\n    /**\n     * The Purchaser Info for the user.\n     */\n    readonly purchaserInfo: PurchaserInfo;\n    /**\n     * True if the call resulted in a new user getting created in the RevenueCat backend.\n     */\n    readonly created: boolean;\n}\nexport declare type ShouldPurchasePromoProductListener = (deferredPurchase: () => void) => void;\n"]}